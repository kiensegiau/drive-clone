const puppeteer = require("puppeteer-core");
const fs = require("fs/promises");
const path = require("path");
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

async function downloadVideo(manifestUrl, outputPath, page) {
  try {
    console.log("üé¨ B·∫Øt ƒë·∫ßu t·∫£i video...");
    
    // Ch·ªânh s·ª≠a URL - x√≥a ph·∫ßn sau format=dash
    const cleanUrl = manifestUrl.split('&format=dash')[0] + '&format=dash';
    console.log("üîó URL ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a:", cleanUrl);

    // S·ª≠ d·ª•ng c·∫•u tr√∫c l·ªánh ffmpeg ƒë∆°n gi·∫£n
    const command = [
      'ffmpeg',
      '-i', `"${cleanUrl}"`,
      '-codec', 'copy',
      `"${outputPath}"`
    ].join(' ');

    console.log("üìù ƒêang th·ª±c thi l·ªánh:", command);
    await execPromise(command);
    
    console.log(`‚úÖ ƒê√£ t·∫£i xong video: ${outputPath}`);
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫£i video:", error);
    throw error;
  }
}

async function captureVideoStreams() {
  const browser = await puppeteer.launch({
    headless: false,
    channel: "chrome",
    executablePath: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
    defaultViewport: null,
    args: [
      "--disable-web-security",
      "--disable-features=IsolateOrigins,site-per-process",
    ],
  });

  try {
    const page = await browser.newPage();

    // Theo d√µi t·∫•t c·∫£ pages
    browser.on("targetcreated", async (target) => {
      const newPage = await target.page();
      if (newPage) {
        console.log("üåê Trang m·ªõi ƒë∆∞·ª£c m·ªü:", target.url());

        // Theo d√µi manifest tr√™n trang m·ªõi
        newPage.on("response", async (response) => {
          try {
            const url = response.url();
            const headers = response.headers();

            if (
              url.includes("mediap.svc.ms") && 
              !url.includes("part=mediasegment") &&
              (
                url.includes(".m3u8") || 
                url.includes(".mpd") ||
                url.includes("manifest") ||
                url.includes("format=mpd") ||
                url.includes("format=m3u8")
              )
            ) {
              const manifestInfo = {
                url: url,
                type: headers["content-type"],
                timestamp: new Date().toISOString()
              };

              console.log(
                "üìÑ T√¨m th·∫•y Manifest URL:",
                JSON.stringify(manifestInfo, null, 2)
              );
//ok
              // L∆∞u manifest URL
              await fs.appendFile(
                "manifest_urls.txt",
                JSON.stringify(manifestInfo) + "\n",
                "utf8"
              );

              // T·∫°o t√™n file video d·ª±a tr√™n timestamp
              const timestamp = new Date().getTime();
              const videoPath = path.join(__dirname, `video_${timestamp}.mp4`);

              // T·ª± ƒë·ªông t·∫£i video khi t√¨m th·∫•y manifest
              console.log("üé• ƒêang chu·∫©n b·ªã t·∫£i video...");
              await downloadVideo(url, videoPath, page);
            }
          } catch (error) {
            console.error("‚ùå L·ªói khi x·ª≠ l√Ω response:", error);
          }
        });
      }
    });

    // Theo d√µi manifest tr√™n trang ch√≠nh
    page.on("response", async (response) => {
      try {
        const url = response.url();
        const headers = response.headers();

        if (
          url.includes("mediap.svc.ms") && 
          !url.includes("part=mediasegment") &&
          (
            url.includes(".m3u8") || 
            url.includes(".mpd") ||
            url.includes("manifest") ||
            url.includes("format=mpd") ||
            url.includes("format=m3u8")
          )
        ) {
          const manifestInfo = {
            url: url,
            type: headers["content-type"],
            timestamp: new Date().toISOString()
          };

          console.log(
            "üìÑ T√¨m th·∫•y Manifest URL:",
            JSON.stringify(manifestInfo, null, 2)
          );

          // L∆∞u manifest URL
          await fs.appendFile(
            "manifest_urls.txt",
            JSON.stringify(manifestInfo) + "\n",
            "utf8"
          );

          // T·∫°o t√™n file video d·ª±a tr√™n timestamp
          const timestamp = new Date().getTime();
          const videoPath = path.join(__dirname, `video_${timestamp}.mp4`);

          // T·ª± ƒë·ªông t·∫£i video khi t√¨m th·∫•y manifest
          console.log("üé• ƒêang chu·∫©n b·ªã t·∫£i video...");
          await downloadVideo(url, videoPath, page);
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi x·ª≠ l√Ω response:", error);
      }
    });

    // Login v√† c√°c ph·∫ßn c√≤n l·∫°i
    await page.goto("https://khokhoahoc.org/tai-khoan/");
    await page.waitForSelector('input[name="username"]');
    await page.type('input[name="username"]', "phanhuukien2001@gmail.com");
    await page.type('input[name="password"]', "9Sh#xd7q9q@$ZAh");
    await page.click('button[name="login"]');
    await page.waitForNavigation();

    console.log("‚úÖ ƒê√£ login th√†nh c√¥ng!");
    console.log("üëâ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ t·ª± do ƒëi·ªÅu khi·ªÉn tr√¨nh duy·ªát.");
    console.log("üé• Script s·∫Ω t·ª± ƒë·ªông theo d√µi, l∆∞u URL v√† t·∫£i video.");

    await new Promise(() => {});
  } catch (error) {
    console.error("‚ùå L·ªói:", error);
    throw error;
  }
}

// Ch·∫°y script
(async () => {
  try {
    await captureVideoStreams();
  } catch (error) {
    console.error("‚ùå L·ªói ch√≠nh:", error);
  }
})();
