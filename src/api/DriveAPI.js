const { google } = require("googleapis");
const { OAuth2Client } = require("google-auth-library");
const path = require("path");
const fs = require("fs");
const readline = require("readline");
const DriveAPIPDFDownloader = require("./PDFDownloaders/DriveAPIPDFDownloader");
const DriveAPIVideoHandler = require("./VideoHandlers/DriveAPIVideoHandler");
const admin = require("firebase-admin");
const { getFirestore } = require("firebase-admin/firestore");
const { getDatabase } = require("firebase-admin/database");
const http = require("http");
const https = require("https");
const axios = require("axios");
const DriveAPIDocsHandler = require("./DocsHandlers/DriveAPIDocsHandler");

const {
  getConfigPath,
  getTempPath,
  sanitizePath,
  ensureDirectoryExists,
  cleanupTempFiles,
} = require("../utils/pathUtils");

class DriveAPI {
  constructor(
    downloadOnly = false,
    maxConcurrent = 3,
    maxBackground = 10,
    pauseDuration = 5
  ) {
    const configPath = getConfigPath();
    const auth = require("../config/auth");

    this.downloadOnly = downloadOnly;
    this.maxConcurrent = maxConcurrent;
    this.maxBackground = maxBackground;
    this.pauseDuration = pauseDuration;
    this.credentials = auth.credentials;
    this.SCOPES = auth.SCOPES;

    // Kh·ªüi t·∫°o OAuth clients
    this.sourceClient = new OAuth2Client(
      auth.credentials.client_id,
      auth.credentials.client_secret,
      auth.credentials.redirect_uris[0]
    );

    this.targetClient = new OAuth2Client(
      auth.credentials.client_id,
      auth.credentials.client_secret,
      auth.credentials.redirect_uris[0]
    );

    // Kh·ªüi t·∫°o tempDir tr∆∞·ªõc khi s·ª≠ d·ª•ng
    this.tempDir = getTempPath();
    if (!this.tempDir) {
      throw new Error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o th∆∞ m·ª•c temp");
    }
    ensureDirectoryExists(this.tempDir);

    // Kh·ªüi t·∫°o drive instances tr∆∞·ªõc khi t·∫°o handlers
    this.sourceDrive = google.drive({
      version: "v3",
      auth: this.sourceClient,
    });

    this.targetDrive = google.drive({
      version: "v3",
      auth: this.targetClient,
    });

    // Kh·ªüi t·∫°o c√°c handlers v·ªõi tempDir v√† drive instances
    this.pdfDownloader = new DriveAPIPDFDownloader(
      this.sourceDrive,
      this.targetDrive,
      this.tempDir,
      console
    );

    // Kh·ªüi t·∫°o stats ƒë·ªÉ theo d√µi
    this.stats = {
      foldersCreated: 0,
      filesProcessed: 0,
      pdfProcessed: 0,
      videosProcessed: 0,
      errors: [],
    };
    this.startTime = Date.now();

    // Kh·ªüi t·∫°o process logger
    this.processLogger = {
      log: (msg) => console.log(msg),
      error: (msg) => console.error(msg),
      warn: (msg) => console.warn(msg),
    };

    // Th√™m bi·∫øn ƒë·ªÉ theo d√µi folder hi·ªán t·∫°i
    this.currentTargetFolderId = null;

    // Kh·ªüi t·∫°o Firebase Realtime Database v·ªõi service account
    if (!admin.apps.length) {
      admin.initializeApp({
        credential: admin.credential.cert({
          projectId: "hocmai-1d38d",
          clientEmail:
            "firebase-adminsdk-8dvgx@hocmai-1d38d.iam.gserviceaccount.com",
          private_key:
            "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCyIskeecHo9tym\nvyxOSAt2UcVZzlDo8hbkJOp/+ufKYniqLwSSvw46kARamkvkOxsOlbzNHshIcohR\nhQNI3T59pCTmlSmlsJZAKqQlpeOjmGzyWNH2f/4yPm73dr4kQ0HqQFMYeVb8xVr8\nh9y7WxitW4nvj0FQ1YyY8E5n0nWjZvgLHkqq7pAPDAlndqt6rfWIDV9wiGG39xq2\nmx1KOUk8ujwtcrDL+sQfv7UZS+Bn8edJdFIFa66HX376H7hMmDE5STFyVpUHwHf8\nQmSoiS0TCIM9Z9yxb654C+DuJX1wrE0pzQg4esCdZfGDEk8h5UVp8oLbXiurfrA+\nSUa6CgzNAgMBAAECggEAVoVlyRsbb4NDvevZ4bXFd3UVFV8L1nELZEl36qxb2+WD\nNSm8H2iTySb9LmKGHPcGV8mr17ctUV7rzih8ZW4sdYr9708g2NzRxZ3Qd4bA78tP\nk1BHvuIA/bdsX1650NQoFlai5Z69/O0AmeqFcCy5ai4ta4FZmKD4dqo1cuD6iV/g\n/xREr35fAAS/ML1GUY9jq0zK1mEGcxc0jRwYuaNo7Eob8Qv57bZqKjBcysUGR2UV\nvffwrPVtow1PcJCdSuB1jGIbr3FaBMt2oq0KYnigzHdfPYLZuyJwsVpMwKIryxlT\nk9S5/b0HSksLanFikkPmPUlO4McFdy9t59p/X5EZowKBgQDY3QgPziYE06Bqi8FD\nZ5F9Y+fPyx/MqfcmXbAiQb3EaJ8JlA+OKJg9LbeiiXz4pH8PYZxVB9s24nGlCGoo\n2Z8+Dt7ABUaKQldYQEOp5eAwqSJKn8m2mW0BgMiP2Hqf14b689PUg+qufd8gkXre\nVkzcf6FrjbNo88HiGRMUNCdbOwKBgQDSSJBrUcqBmi93U4DyIov8ls+RNHiPS6GQ\nd4WYl8izZnHNyHa7Dib+oHY4fQfjlQRnnjHGoAHBT/Q+vWvkwiW441kr7HQCPrzW\nWteRG+XcQW3IBAY2/7mnC1pRJ04PwI1lT2WaKT2yYmuRKPLalUgWOv06ZkX999Ll\nmDXD6HPnlwKBgQCXFH1eTXbNHAYA1DYi2E9SdLx1VgRkV/CXqONhKj2jTGOnj5+6\noOtWi7gIIxKOQkNGmvEHh/6fYOhdWdxjcyDuYfuq+MHo5kjlcXfyL/Sc0efS5zjm\n3kJDrs2K8PyUyNj/kch8oB5py8Ubcl6P8L2BS+VQAZsAvfjPpDpXc/ILKwKBgQCn\nIxn20wm8PUrg8zQYQLE3UL8mUKhKbPi7lORQxsO1JAXsZBtKzhLca7nLaEVu9DCO\nE0TI9MCwX9ZoT7KEHnRRIhLsQIJsjmUVkxqnsZ7fk/mn8trluBhd1z4wJqd7CbbZ\nAWRmRcVOFcAdnoh4iBLF6JkBY+zZ0bKE3phNYGNPfQKBgCltb6OIBPQUd0+i2t+g\n9f8Z8onseHoVr0d3t84XaqCke6mJfFGLOsHrgZhrqX1Kjg+elEU75Ydt55Isjls3\nhPHGM2SAyz2C5H1XUtppcwGvE+q4X3qzGVLHWd8lwt1cauOggqfO2FsYjyAsHAMw\niEhH5Fflt3VpCEVA/0jkzHZ/\n-----END PRIVATE KEY-----\n",
        }),
        databaseURL:
          "https://hocmai-1d38d-default-rtdb.asia-southeast1.firebasedatabase.app",
      });
    }
    this.db = getDatabase();
  }

  async authenticate() {
    try {
      console.log("üîë ƒêang x√°c th·ª±c v·ªõi Drive API...");

      // X√°c th·ª±c source
      const sourceToken = await this.getToken("source");
      this.sourceClient.setCredentials(sourceToken);

      // Kh·ªüi t·∫°o source drive instance
      this.sourceDrive = google.drive({
        version: "v3",
        auth: this.sourceClient,
      });

      // L·∫•y th√¥ng tin source user
      const sourceUser = await this.sourceDrive.about.get({
        fields: "user",
      });
      this.sourceEmail = sourceUser.data.user.emailAddress;
      console.log(`‚úÖ ƒê√£ x√°c th·ª±c t√†i kho·∫£n ngu·ªìn: ${this.sourceEmail}`);

      // L∆∞u source token v√†o Firebase
      await this.saveTokenToFirebase(
        sourceToken,
        "source",
        this.sourceEmail,
        "active"
      );

      if (!this.downloadOnly) {
        // X√°c th·ª±c target
        const targetToken = await this.getToken("target");
        this.targetClient.setCredentials(targetToken);

        // Kh·ªüi t·∫°o target drive instance
        this.targetDrive = google.drive({
          version: "v3",
          auth: this.targetClient,
        });

        // L·∫•y th√¥ng tin target user
        const targetUser = await this.targetDrive.about.get({
          fields: "user",
        });
        this.targetEmail = targetUser.data.user.emailAddress;
        console.log(`‚úÖ ƒê√£ x√°c th·ª±c t√†i kho·∫£n ƒë√≠ch: ${this.targetEmail}`);

        // L∆∞u target token v√†o Firebase
        await this.saveTokenToFirebase(
          targetToken,
          "target",
          this.targetEmail,
          "active"
        );
      }

      // Set default drive instance
      this.drive = this.downloadOnly ? this.sourceDrive : this.targetDrive;

      // Ki·ªÉm tra v√† log th√¥ng tin token
      await this.checkCurrentTokens();
    } catch (error) {
      console.error("‚ùå L·ªói x√°c th·ª±c:", error.message);
      throw error;
    }
  }

  async checkCurrentTokens() {
    try {
      const sourceCredentials = this.sourceClient.credentials;
      const targetCredentials = this.targetClient.credentials;

      console.log("\nüìù Th√¥ng tin token hi·ªán t·∫°i:");

      if (sourceCredentials) {
        console.log("\nüîë SOURCE TOKEN:");
        console.log(`- Email: ${this.sourceEmail}`);
        console.log(
          `- Access Token: ${sourceCredentials.access_token ? "‚úÖ" : "‚ùå"}`
        );
        console.log(
          `- Refresh Token: ${sourceCredentials.refresh_token ? "‚úÖ" : "‚ùå"}`
        );
        if (sourceCredentials.expiry_date) {
          const expiryDate = new Date(sourceCredentials.expiry_date);
          console.log(`- H·∫øt h·∫°n: ${expiryDate.toLocaleString()}`);
        }
      }

      if (!this.downloadOnly && targetCredentials) {
        console.log("\nüîë TARGET TOKEN:");
        console.log(`- Email: ${this.targetEmail}`);
        console.log(
          `- Access Token: ${targetCredentials.access_token ? "‚úÖ" : "‚ùå"}`
        );
        console.log(
          `- Refresh Token: ${targetCredentials.refresh_token ? "‚úÖ" : "‚ùå"}`
        );
        if (targetCredentials.expiry_date) {
          const expiryDate = new Date(targetCredentials.expiry_date);
          console.log(`- H·∫øt h·∫°n: ${expiryDate.toLocaleString()}`);
        }
      }
    } catch (error) {
      console.error("‚ùå L·ªói ki·ªÉm tra token:", error.message);
    }
  }

  async getToken(type = "source") {
    try {
      const tokenPath = path.join(getConfigPath(), `token_${type}.json`);

      // Ki·ªÉm tra file token ƒë√£ t·ªìn t·∫°i
      if (fs.existsSync(tokenPath)) {
        const token = JSON.parse(fs.readFileSync(tokenPath, "utf8"));

        // L∆∞u token v√†o Firebase n·∫øu t·ªìn t·∫°i
        if (this[`${type}Email`]) {
          await this.saveTokenToFirebase(token, type, this[`${type}Email`]);
        }

        return token;
      }

      // T·∫°o token m·ªõi n·∫øu ch∆∞a c√≥
      return await this.createNewToken(type);
    } catch (error) {
      console.error(`‚ùå L·ªói l·∫•y token ${type}:`, error.message);
      throw error;
    }
  }

  async createNewToken(type = "source") {
    console.log(`‚ö†Ô∏è To token m·ªõi cho t√†i kho·∫£n ${type}...`);

    const client = type === "source" ? this.sourceClient : this.targetClient;
    const authUrl = client.generateAuthUrl({
      access_type: "offline",
      scope: this.SCOPES,
      prompt: "consent",
    });

    console.log(`\nüì± H∆∞·ªõng d·∫´n l·∫•y m√£ x√°c th·ª±c:`);
    console.log(`1. Truy c·∫≠p URL sau trong tr√¨nh duy·ªát:`);
    console.log(authUrl);
    console.log(`\n2. ƒêƒÉng nh·∫≠p v√† c·∫•p quy·ªÅn cho ·ª©ng d·ª•ng`);
    console.log(`3. Sau khi redirect, copy m√£ t·ª´ URL (ph·∫ßn sau "code=")`);
    console.log(
      `4. Paste m√£ ngay v√†o ƒëy (m√£ ch·ªâ cÔøΩÔøΩ hi·ªáu l·ª±c trong v√†i gi√¢y)\n`
    );

    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    let retryCount = 0;
    const MAX_RETRIES = 3;
    while (retryCount < MAX_RETRIES) {
      try {
        const code = await new Promise((resolve) => {
          rl.question("üìù Nh·∫≠p m√£ x√°c th·ª±c: ", (code) => {
            let cleanCode = code.trim().replace(/%%/g, "%").replace(/\s+/g, "");

            // Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng g·ªëc 4/0A
            if (cleanCode.includes("4/0A")) {
              // ƒê√£ ƒë√∫ng ƒë·ªãnh d·∫°ng, gi·ªØ nguy√™n
            } else if (cleanCode.includes("4%2F0A")) {
              // Chuy·ªÉn t·ª´ 4%2F0A v·ªÅ 4/0A
              cleanCode = cleanCode.replace("4%2F0A", "4/0A");
            }

            resolve(cleanCode);
          });
        });

        if (!code) {
          retryCount++;
          continue;
        }

        console.log(`\nüîë ƒêang x√°c th·ª±c v·ªõi m√£: ${code}`);

        const { tokens } = await client.getToken(code);

        // L∆∞u token v√†o file
        const tokenPath = path.join(getConfigPath(), `token_${type}.json`);
        fs.writeFileSync(tokenPath, JSON.stringify(tokens));
        console.log(`\nüíæ ƒê√£ l∆∞∆∞u token ${type} t·∫°i: ${tokenPath}`);

        // L∆∞u token v√†o Firebase
        if (this[`${type}Email`]) {
          await this.saveTokenToFirebase(tokens, type, this[`${type}Email`]);
        }

        rl.close();
        return tokens;
      } catch (error) {
        console.error(`\n‚ùå L·ªói: ${error.message}`);
        if (error.message.includes("invalid_grant")) {
          console.log(
            `\n‚ö†Ô∏è M√£ ƒë√£ h·∫øt h·∫°n ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng l·∫•y m√£ m·ªõi.`
          );
          console.log(`1. Truy c·∫≠p l·∫°i URL ƒë·ªÉ l·∫•y m√£ m·ªõi:`);
          console.log(authUrl);
        }
        retryCount++;

        if (retryCount < MAX_RETRIES) {
          console.log(`\nüîÑ Th·ª≠ l·∫°i l·∫ßn ${retryCount + 1}/${MAX_RETRIES}...\n`);
        }
      }
    }

    rl.close();
    throw new Error(`Kh√¥ng th·ªÉ l·∫•y token sau ${MAX_RETRIES} l·∫ßn th·ª≠`);
  }

  async initUsers() {
    try {
      const sourceUser = await this.sourceDrive.about.get({
        fields: "user",
      });
      this.sourceEmail = sourceUser.data.user.emailAddress;
      console.log(`‚úÖ ƒê√£ x√°c th·ª±c t√†i kho·∫£n ngu·ªìn: ${this.sourceEmail}`);

      if (!this.downloadOnly) {
        const targetUser = await this.targetDrive.about.get({
          fields: "user",
        });
        this.targetEmail = targetUser.data.user.emailAddress;
        console.log(`‚úÖ ƒê√£ x√°c th·ª±c t√†i kho·∫£n ƒë√≠ch: ${this.targetEmail}`);
      }
    } catch (error) {
      console.error("‚ùå L·ªói l·∫•y th√¥ng tin users:", error);
      throw error;
    }
  }

  async start(sourceFolderId) {
    try {
      console.log(`\nüîç ƒêang ki·ªÉm tra quy·ªÅn truy c·∫≠p folder...`);

      // L·∫•y th√¥ng tin folder ngu·ªìn
      const folderInfo = await this.sourceDrive.files.get({
        fileId: sourceFolderId,
        fields: "name, owners",
        supportsAllDrives: true,
        includeItemsFromAllDrives: true,
      });

      console.log(`‚úÖ ƒê√£ t√¨m th·∫•y folder: "${folderInfo.data.name}"`);
      if (folderInfo.data.owners && folderInfo.data.owners[0]) {
        console.log(` Ch·ªß s·ªü h·ªØu: ${folderInfo.data.owners[0].emailAddress}`);
      }

      // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω
      console.log(`\nüéØ B·∫Øt ƒë·∫ßu t·∫£i folder: ${folderInfo.data.name}`);

      // T√¨m folder g·ªëc "video-drive-clone" tr∆∞·ªõc
      console.log(`\nüîç ƒêang t√¨m folder g·ªëc: "video-drive-clone"`);
      const existingRootFolders = await this.targetDrive.files.list({
        q: `name = 'video-drive-clone' and mimeType = 'application/vnd.google-apps.folder' and trashed = false`,
        fields: 'files(id, name)',
        spaces: 'drive',
        supportsAllDrives: true,
      });

      let rootFolder;
      if (existingRootFolders.data.files.length > 0) {
        rootFolder = existingRootFolders.data.files[0];
        console.log(`‚úÖ ƒê√£ t√¨m th·∫•y folder g·ªëc: "video-drive-clone" (${rootFolder.id})`);
      } else {
        console.log(`üìÅ T·∫°o m·ªõi folder g·ªëc: "video-drive-clone"`);
        rootFolder = await this.findOrCreateFolder("video-drive-clone");
        console.log(`‚úÖ ƒê√£ t·∫°o folder g·ªëc: "video-drive-clone" (${rootFolder.id})`);
      }

      // T√¨m ho·∫∑c t·∫°o folder con v·ªõi t√™n folder ngu·ªìn trong video-drive-clone
      console.log(`\nüîç ƒêang t√¨m folder: "${folderInfo.data.name}"`);
      const existingSourceFolders = await this.targetDrive.files.list({
        q: `name = '${folderInfo.data.name.replace(/'/g, "\\'")}' and '${rootFolder.id}' in parents and mimeType = 'application/vnd.google-apps.folder' and trashed = false`,
        fields: 'files(id, name)',
        spaces: 'drive',
        supportsAllDrives: true,
      });

      let sourceNameFolder;
      if (existingSourceFolders.data.files.length > 0) {
        sourceNameFolder = existingSourceFolders.data.files[0];
        console.log(`‚úÖ ƒê√£ t√¨m th·∫•y folder: "${folderInfo.data.name}" (${sourceNameFolder.id})`);
      } else {
        console.log(`üìÅ T·∫°o m·ªõi folder: "${folderInfo.data.name}"`);
        sourceNameFolder = await this.findOrCreateFolder(
          folderInfo.data.name,
          rootFolder.id
        );
        console.log(`‚úÖ ƒê√£ t·∫°o folder: "${folderInfo.data.name}" (${sourceNameFolder.id})`);
      }

      this.currentTargetFolderId = sourceNameFolder.id;

      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
      try {
        await this.sourceDrive.files.list({
          q: `'${sourceFolderId}' in parents and trashed=false`,
          fields: "files(id, name)",
          pageSize: 1,
        });

        // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω n·ªôi dung folder
        await this.processFolder(sourceFolderId);
      } catch (error) {
        if (error.message.includes("File not found")) {
          console.error(`\n‚ùå Kh√¥ng th·ªÉ truy c·∫≠p folder. Vui l√≤ng ki·ªÉm tra:`);
          console.log(
            `1. URL folder: https://drive.google.com/drive/folders/${sourceFolderId}`
          );
          console.log(
            `2. T√†i kho·∫£n ngu·ªìn (${this.sourceEmail}) ph·∫£i c√≥ quy·ªÅn xem folder`
          );
          console.log(`3. Folder ph·∫£i ƒë∆∞·ª£c chia s·∫ª v·ªõi t√†i kho·∫£n ngu·ªìn`);
          console.log(`\nüí° M√£ l·ªói:`, error.message);
          console.log(`\nüí° Tr·∫°ng th√°i:`, error.response?.status);
          console.log(`\nüí° Chi ti·∫øt:`, error.response?.data);
        }
        throw error;
      }
    } catch (error) {
      console.error(`‚ùå L·ªói x·ª≠ l√Ω folder:`, error.message);
      throw error;
    }
  }

  async findOrCreateFolder(folderName, parentId = null) {
    try {
      // Sanitize t√™n folder cho an to√†n
      const sanitizedName = folderName
        .replace(/[\\/:"*?<>|]/g, "_") // Thay th·∫ø k√Ω t·ª± kh√¥ng h·ª£p l·ªá b·∫±ng d·∫•u _
        .replace(/\s+/g, " ") // Chu·∫©n h√≥a kho·∫£ng tr·∫Øng
        .trim(); // X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi

      // Escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong query
      const escapedName = sanitizedName
        .replace(/'/g, "\\'")
        .replace(/\\/g, "\\\\");

      // T√¨m folder hi·ªán c√≥
      const query = `mimeType='application/vnd.google-apps.folder' and name='${escapedName}'${
        parentId ? ` and '${parentId}' in parents` : ""
      } and trashed=false`;

      const response = await this.targetDrive.files.list({
        q: query,
        fields: "files(id, name)",
        supportsAllDrives: true,
      });

      if (response.data.files.length > 0) {
        const folder = response.data.files[0];
        console.log(`üìÇ ƒê√£ t·ªìn t·∫°i folder: "${folder.name}" (${folder.id})`);
        return folder;
      }

      // T·∫°o folder m·ªõi n·∫øu ch∆∞a c√≥
      console.log(`üìÅ T·∫°o folder m·ªõi: "${sanitizedName}"`);
      const fileMetadata = {
        name: sanitizedName, // S·ª≠ d·ª•ng t√™n ƒë√£ sanitize
        mimeType: "application/vnd.google-apps.folder",
        parents: parentId ? [parentId] : undefined,
      };

      try {
        const folder = await this.targetDrive.files.create({
          requestBody: fileMetadata,
          fields: "id, name",
          supportsAllDrives: true,
        });

        console.log(
          `‚úÖ ƒê√£ t·∫°o folder: "${folder.data.name}" (${folder.data.id})`
        );
        return folder.data;
      } catch (createError) {
        // N·∫øu l·ªói t·∫°o folder, th·ª≠ t·∫°o v·ªõi t√™n an to√†n h∆°n
        const safeNameForCreate = sanitizedName
          .replace(/[^a-zA-Z0-9\s-_]/g, "") // Ch·ªâ gi·ªØ l·∫°i ch·ªØ, s·ªë, kho·∫£ng tr·∫Øng, - v√† _
          .trim();

        if (safeNameForCreate !== sanitizedName) {
          console.log(`‚ö†Ô∏è Th·ª≠ t·∫°o l·∫°i v·ªõi t√™n an to√†n: "${safeNameForCreate}"`);
          fileMetadata.name = safeNameForCreate;
          const folder = await this.targetDrive.files.create({
            requestBody: fileMetadata,
            fields: "id, name",
            supportsAllDrives: true,
          });
          console.log(
            `‚úÖ ƒê√£ t·∫°o folder: "${folder.data.name}" (${folder.data.id})`
          );
          return folder.data;
        }
        throw createError;
      }
    } catch (error) {
      console.error(`‚ùå L·ªói t·∫°o/t√¨m folder "${folderName}":`, error.message);
      throw error;
    }
  }

  async processFolder(folderId) {
    try {
      let pageToken;
      let hasErrors = false;
      const errors = [];

      do {
        try {
          const response = await this.sourceDrive.files.list({
            q: `'${folderId}' in parents and trashed=false`,
            fields: "nextPageToken, files(id, name, mimeType, size)",
            pageToken: pageToken,
            supportsAllDrives: true,
            includeItemsFromAllDrives: true,
          });

          // Ph√¢n lo·∫°i files
          const pdfFiles = [];
          const videoFiles = [];
          const folders = [];
          const otherFiles = [];
          const docsFiles = [];

          for (const file of response.data.files) {
            if (file.mimeType === "application/vnd.google-apps.folder") {
              folders.push(file);
            } else if (file.name.toLowerCase().endsWith(".pdf")) {
              pdfFiles.push({
                id: file.id,
                fileId: file.id,
                name: file.name,
                size: file.size,
                mimeType: file.mimeType,
                targetFolderId: this.currentTargetFolderId,
              });
            } else if (file.name.toLowerCase().match(/\.(mp4|mkv|avi|mov|m2ts)$/)) {
              videoFiles.push({
                id: file.id,
                fileId: file.id,
                name: file.name,
                fileName: file.name,
                size: file.size,
                mimeType: file.mimeType,
                targetFolderId: this.currentTargetFolderId,
                depth: 0,
              });
            } else if (file.mimeType === "application/vnd.google-apps.document") {
              docsFiles.push({
                id: file.id,
                fileId: file.id,
                name: file.name,
                size: file.size,
                mimeType: file.mimeType,
                targetFolderId: this.currentTargetFolderId,
              });
            } else {
              otherFiles.push({
                id: file.id,
                fileId: file.id,
                name: file.name,
                size: file.size,
                mimeType: file.mimeType,
                targetFolderId: this.currentTargetFolderId,
              });
            }
          }

          // X·ª≠ l√Ω folders tr∆∞·ªõc
          for (const folder of folders) {
            try {
              if (!this.downloadOnly) {
                console.log(`\nüìÅ T·∫°o/t√¨m folder: "${folder.name}"`);
                const targetFolder = await this.findOrCreateFolder(
                  folder.name,
                  this.currentTargetFolderId
                );
                console.log(` Folder: "${folder.name}" (${targetFolder.id})`);

                const previousFolderId = this.currentTargetFolderId;
                this.currentTargetFolderId = targetFolder.id;
                await this.processFolder(folder.id);
                this.currentTargetFolderId = previousFolderId;
              }
            } catch (folderError) {
              console.error(
                `‚ùå L·ªói x·ª≠ l√Ω folder "${folder.name}":`,
                folderError.message
              );
              errors.push({
                type: "folder",
                name: folder.name,
                error: folderError.message,
              });
              hasErrors = true;
              continue;
            }
          }

          // X·ª≠ l√Ω PDF files
          if (pdfFiles.length > 0) {
            try {
              console.log(`\nüìë X·ª≠ l√Ω ${pdfFiles.length} file PDF...`);
              console.log(`üìÅ Upload v√†o folder: ${this.currentTargetFolderId}`);

              const pdfDownloader = new DriveAPIPDFDownloader(
                this.sourceDrive,
                this.targetDrive,
                getTempPath(),
                this.processLogger
              );

              const pdfFilesInfo = pdfFiles.map((file) => ({
                fileId: file.id,
                id: file.id,
                name: file.name,
                size: file.size,
                targetFolderId: this.currentTargetFolderId,
              }));

              await pdfDownloader.processPDFFiles(pdfFilesInfo);
            } catch (pdfError) {
              console.error(`‚ùå L·ªói x·ª≠ l√Ω PDF files:`, pdfError.message);
              errors.push({ type: "pdf", error: pdfError.message });
              hasErrors = true;
            }
          }

          // X·ª≠ l√Ω video files
          if (videoFiles.length > 0) {
            console.log(`\nüé• X·ª≠ l√Ω ${videoFiles.length} file video...`);

            // X·ª≠ l√Ω theo batch v·ªõi k√≠ch th∆∞·ªõc maxBackground
            for (let i = 0; i < videoFiles.length; i += this.maxBackground) {
              const batch = videoFiles.slice(i, i + this.maxBackground);
              const results = await this.processVideosBatch(batch);

              // X·ª≠ l√Ω c√°c video th·∫•t b·∫°i b·∫±ng VideoHandler
              const failedVideos = results
                .filter(result => !result.success && result.needAlternative)
                .map(result => result.file);

              const skippedVideos = results.filter(result => result.skipped).length;
              if (skippedVideos > 0) {
                console.log(`\nüîÑ ƒê√£ b·ªè qua ${skippedVideos} video ƒë√£ t·ªìn t·∫°i`);
              }

              if (failedVideos.length > 0) {
                console.log(`\nüîÑ C√≥ ${failedVideos.length} video c·∫ßn x·ª≠ l√Ω b·∫±ng ph∆∞∆°ng √°n thay th·∫ø...`);
                
                const videoHandler = new DriveAPIVideoHandler(
                  this.sourceDrive,
                  this.targetDrive,
                  false,
                  this.maxConcurrent,
                  this.maxBackground,
                  this.pauseDuration
                );

                // Th√™m th√¥ng tin c·∫ßn thi·∫øt cho m·ªói video
                const videoInfos = failedVideos.map(video => ({
                  fileId: video.id,
                  fileName: video.name,
                  targetFolderId: this.currentTargetFolderId,
                  size: video.size
                }));

                // Kh·ªüi t·∫°o queue
                videoHandler.queue = videoInfos;
                
                // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω queue
                await videoHandler.processQueue();
              }
            }
          }

          // X·ª≠ l√Ω other files
          if (otherFiles.length > 0) {
            try {
              console.log(`\nüìÑ X·ª≠ l√Ω ${otherFiles.length} file kh√°c...`);
              for (const file of otherFiles) {
                try {
                  console.log(`üìÑ ƒêang t·∫£i file: ${file.name}`);
                  const response = await this.sourceDrive.files.get(
                    {
                      fileId: file.id,
                      alt: "media",
                      supportsAllDrives: true,
                    },
                    {
                      responseType: "stream",
                    }
                  );

                  const uploadResponse = await this.targetDrive.files.create({
                    requestBody: {
                      name: file.name,
                      parents: [this.currentTargetFolderId],
                      mimeType: file.mimeType,
                    },
                    media: {
                      mimeType: file.mimeType,
                      body: response.data,
                    },
                    fields: "id, name",
                    supportsAllDrives: true,
                  });

                  // V√¥ hi·ªáu h√≥a quy·ªÅn sau khi upload th√†nh c√¥ng
                  try {
                    await this.targetDrive.files.update({
                      fileId: uploadResponse.data.id,
                      requestBody: {
                        copyRequiresWriterPermission: true,
                        viewersCanCopyContent: false,
                        writersCanShare: false,
                        sharingUser: null,
                        permissionIds: []
                      },
                      supportsAllDrives: true,
                    });

                    console.log(`üîí ƒê√£ v√¥ hi·ªáu h√≥a c√°c quy·ªÅn chia s·∫ª cho: ${file.name}`);
                  } catch (permError) {
                    console.error(`‚ö†Ô∏è L·ªói c·∫•u h√¨nh quy·ªÅn:`, permError.message);
                  }

                  console.log(`‚úÖ ƒê√£ t·∫£i xong: ${uploadResponse.data.name}`);
                  this.stats.filesProcessed++;
                } catch (fileError) {
                  console.error(
                    `‚ùå L·ªói t·∫£i file "${file.name}":`,
                    fileError.message
                  );
                  errors.push({
                    type: "other_file",
                    name: file.name,
                    error: fileError.message,
                  });
                  hasErrors = true;
                  continue;
                }
              }
            } catch (otherFilesError) {
              console.error(
                `‚ùå L·ªói x·ª≠ l√Ω c√°c file kh√°c:`,
                otherFilesError.message
              );
              errors.push({
                type: "other_files",
                error: otherFilesError.message,
              });
              hasErrors = true;
            }
          }

          // X·ª≠ l√Ω Google Docs files
          if (docsFiles.length > 0) {
            try {
              console.log(`\nüìÑ X·ª≠ l√Ω ${docsFiles.length} file Google Docs...`);
              console.log(`üìÅ Upload v√†o folder: ${this.currentTargetFolderId}`);

              const docsHandler = new DriveAPIDocsHandler(
                this.sourceDrive,
                this.targetDrive,
                getTempPath(),
                this.processLogger
              );

              for (const docsFile of docsFiles) {
                await docsHandler.processDocsFile(docsFile, this.currentTargetFolderId);
              }
            } catch (docsError) {
              console.error(`‚ùå L·ªói x·ª≠ l√Ω Google Docs files:`, docsError.message);
              errors.push({ type: "docs", error: docsError.message });
              hasErrors = true;
            }
          }

          pageToken = response.data.nextPageToken;
        } catch (pageError) {
          console.error(`‚ùå L·ªói l·∫•y danh s√°ch files:`, pageError.message);
          errors.push({ type: "page", error: pageError.message });
          hasErrors = true;
          pageToken = null;
        }
      } while (pageToken);

      // Log t·ªïng h·ª£p l·ªói n·∫øu c√≥
      if (hasErrors) {
        console.log("\n‚ö†Ô∏è T·ªïng h·ª£p l·ªói:");
        errors.forEach((error) => {
          console.log(
            `- ${error.type}${error.name ? ` (${error.name})` : ""}: ${
              error.error
            }`
          );
        });
      }
    } catch (error) {
      console.error(`‚ùå L·ªói x·ª≠ l√Ω folder:`, error.message);
    }
  }

  async processFile(file) {
    try {
      // Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingFile = await this.targetDrive.files.list({
        q: `name = '${file.name.replace(/'/g, "\\'")}' and '${this.currentTargetFolderId}' in parents and trashed = false`,
        fields: 'files(id, name)',
        spaces: 'drive',
        supportsAllDrives: true,
      });

      if (existingFile.data.files.length > 0) {
        console.log(`‚è© ƒê√£ t·ªìn t·∫°i file: ${file.name}`);
        return {
          success: true,
          skipped: true
        };
      }

      console.log(`üìÑ ƒêang t·∫£i file: ${file.name}`);
      const response = await this.sourceDrive.files.get(
        {
          fileId: file.id,
          alt: "media",
          supportsAllDrives: true,
        },
        {
          responseType: "stream",
        }
      );

      const uploadResponse = await this.targetDrive.files.create({
        requestBody: {
          name: file.name,
          parents: [this.currentTargetFolderId],
          mimeType: file.mimeType,
        },
        media: {
          mimeType: file.mimeType,
          body: response.data,
        },
        fields: "id, name",
        supportsAllDrives: true,
      });

      // V√¥ hi·ªáu h√≥a quy·ªÅn sau khi upload th√†nh c√¥ng
      try {
        await this.targetDrive.files.update({
          fileId: uploadResponse.data.id,
          requestBody: {
            copyRequiresWriterPermission: true,
            viewersCanCopyContent: false,
            writersCanShare: false,
            sharingUser: null,
            permissionIds: []
          },
          supportsAllDrives: true,
        });

        console.log(`üîí ƒê√£ v√¥ hi·ªáu h√≥a c√°c quy·ªÅn chia s·∫ª cho: ${file.name}`);
      } catch (permError) {
        console.error(`‚ö†Ô∏è L·ªói c·∫•u h√¨nh quy·ªÅn:`, permError.message);
      }

      console.log(`‚úÖ ƒê√£ t·∫£i xong: ${uploadResponse.data.name}`);
      this.stats.filesProcessed++;
      
      return {
        success: true,
        uploadedFile: uploadResponse.data
      };

    } catch (error) {
      console.error(`‚ùå L·ªói x·ª≠ l√Ω file ${file.name}:`, error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  async logFinalStats() {
    console.log("\n====================================");
    console.log("üìä Th·ªëng k√™:");
    console.log(`‚úÖ T·ªïng s·ªë folder ƒë√£ t·∫°o: ${this.stats.foldersCreated}`);
    console.log(`üìÑ T·ªïng s·ªë file ƒë√£ x·ª≠ l√Ω: ${this.stats.filesProcessed}`);
    console.log(
      `‚è±Ô∏è Th·ªùi gian th·ª±c hi·ªán: ${((Date.now() - this.startTime) / 1000).toFixed(
        3
      )}s`
    );
  }

  async saveTokenToFirebase(token, type, email, status = "new") {
    try {
      // Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù Vi·ªát Nam (UTC+7)
      const vietnamTimeOffset = 7 * 60 * 60 * 1000; // 7 gi·ªù tnh b·∫±ng milliseconds
      const now = new Date();
      const vietnamTime = new Date(now.getTime() + vietnamTimeOffset);
      const vietnamTimeExpiry = new Date(
        now.getTime() + vietnamTimeOffset + 3600000
      ); // Th√™m 1 gi·ªù

      const tokenData = {
        token: token,
        email: email,
        type: type,
        status: status,
        createdAt: vietnamTime.toISOString(),
        accessTokenExpiry: vietnamTimeExpiry.toISOString(),
        hasRefreshToken: !!token.refresh_token,
        projectId: "hocmai-1d38d",
      };

      // T·∫°o reference theo email v√† type
      const safeEmail = email.replace(/[\.\#\$\[\]]/g, "_");
      const tokenRef = this.db
        .ref("drive_tokens")
        .child(safeEmail)
        .child(type)
        .push();

      await tokenRef.set(tokenData);
    } catch (error) {}
  }

  async checkFileAccess(fileId, fileName) {
    try {
      const response = await this.sourceDrive.files.get({
        fileId: fileId,
        fields: "capabilities",
        supportsAllDrives: true,
      });

      return {
        canDownload: response.data.capabilities.canDownload,
        fileName: fileName,
      };
    } catch (error) {
      console.log(`‚ö†Ô∏è Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file: ${fileName}`);
      return {
        canDownload: false,
        fileName: fileName,
      };
    }
  }

  async downloadFileViaAPI(fileId, fileName, targetPath) {
    try {
      console.log(`üì• ƒêang th·ª≠ t·∫£i qua API: ${fileName}`);
      const dest = fs.createWriteStream(targetPath);

      const response = await this.sourceDrive.files.get(
        {
          fileId: fileId,
          alt: "media",
          supportsAllDrives: true,
          acknowledgeAbuse: true,
        },
        {
          responseType: "stream",
        }
      );

      return new Promise((resolve, reject) => {
        response.data
          .on("end", () => {
            console.log(`‚úÖ T·∫£i th√†nh c√¥ng qua API: ${fileName}`);
            resolve(true);
          })
          .on("error", (err) => {
            console.log(`‚ùå L·ªói t·∫£i qua API: ${fileName}`);
            console.log(`   ${err.message}`);
            reject(err);
          })
          .pipe(dest);
      });
    } catch (error) {
      console.log(`‚ùå Kh√¥ng th·ªÉ t·∫£i qua API: ${fileName}`);
      console.log(`   ${error.message}`);
      return false;
    }
  }

  // Th√™m h√†m helper ƒë·ªÉ x·ª≠ l√Ω video song song
  async processVideosBatch(videos) {
    // Ki·ªÉm tra t·ªìn t·∫°i tr∆∞·ªõc cho t·∫•t c·∫£ video
    const existingChecks = await Promise.all(videos.map(async file => {
      const existingFile = await this.targetDrive.files.list({
        q: `name = '${file.name.replace(/'/g, "\\'")}' and '${this.currentTargetFolderId}' in parents and trashed = false`,
        fields: 'files(id, name, size)',
        spaces: 'drive',
        supportsAllDrives: true,
      });

      if (existingFile.data.files.length > 0) {
        const existing = existingFile.data.files[0];
        if (existing.size == file.size) {
          console.log(`‚è© ƒê√£ t·ªìn t·∫°i video: ${file.name}`);
          console.log(`   K√≠ch th∆∞·ªõc: ${(file.size / (1024 * 1024)).toFixed(2)} MB`);
          return { file, exists: true };
        }
      }
      return { file, exists: false };
    }));

    // L·ªçc ra c√°c video ch∆∞a t·ªìn t·∫°i ƒë·ªÉ x·ª≠ l√Ω
    const videosToProcess = existingChecks
      .filter(check => !check.exists)
      .map(check => check.file);

    if (videosToProcess.length === 0) {
      console.log(`\n‚úÖ T·∫•t c·∫£ video ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn x·ª≠ l√Ω th√™m`);
      return existingChecks.map(check => ({
        success: true,
        file: check.file,
        skipped: check.exists
      }));
    }

    // X·ª≠ l√Ω c√°c video ch∆∞a t·ªìn t·∫°i
    const results = await Promise.all(
      videosToProcess.map(file => this.processVideoDirectly(file))
    );
    
    // X·ª≠ l√Ω c√°c video th·∫•t b·∫°i b·∫±ng VideoHandler
    const failedVideos = results
      .filter(result => !result.success && result.needAlternative)
      .map(result => result.file);

    if (failedVideos.length > 0) {
      console.log(`\nüîÑ C√≥ ${failedVideos.length} video c·∫ßn x·ª≠ l√Ω b·∫±ng ph∆∞∆°ng √°n thay th·∫ø...`);
      
      const videoHandler = new DriveAPIVideoHandler(
        this.sourceDrive,
        this.targetDrive,
        false,
        this.maxConcurrent,
        this.maxBackground,
        this.pauseDuration
      );

      // Th√™m th√¥ng tin c·∫ßn thi·∫øt cho m·ªói video
      const videoInfos = failedVideos.map(video => ({
        fileId: video.id,
        fileName: video.name,
        targetFolderId: this.currentTargetFolderId,
        size: video.size
      }));

      // Kh·ªüi t·∫°o queue
      videoHandler.queue = videoInfos;
      
      // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω queue
      await videoHandler.processQueue();
    }

    // K·∫øt h·ª£p k·∫øt qu·∫£ t·ª´ c·∫£ hai ph∆∞∆°ng th·ª©c
    return [
      ...existingChecks.filter(check => check.exists).map(check => ({
        success: true,
        file: check.file,
        skipped: true
      })),
      ...results
    ];
  }

  async processVideoDirectly(file) {
    try {
      // TƒÉng timeout v√† th√™m retry
      const axiosInstance = axios.create({
        timeout: 30000, // TƒÉng l√™n 30 gi√¢y
        httpAgent: new http.Agent({ keepAlive: true }),
        httpsAgent: new https.Agent({ keepAlive: true })
      });

      const MAX_RETRIES = 3;
      let attempt = 0;

      while (attempt < MAX_RETRIES) {
        try {
          console.log(`\nüì• ƒêang t·∫£i video (L·∫ßn ${attempt + 1}/${MAX_RETRIES}): ${file.name}`);
          
          // Ki·ªÉm tra ch·∫Øc ch·∫Øn ƒë√¢y l√† file video
          const isVideo = file.name.toLowerCase().match(/\.(mp4|mkv|avi|mov|m2ts)$/);
          if (!isVideo) {
            console.log(`‚ö†Ô∏è Kh√¥ng ph·∫£i file video: ${file.name}`);
            return { success: false, file, error: 'Kh√¥ng ph·∫£i file video' };
          }

          console.log(`\nüìΩÔ∏è ƒêang x·ª≠ l√Ω video: ${file.name}`);

          // Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i ch∆∞a
          const existingFile = await this.targetDrive.files.list({
            q: `name = '${file.name.replace(/'/g, "\\'")}' and '${this.currentTargetFolderId}' in parents and trashed = false`,
            fields: 'files(id, name, size)',
            spaces: 'drive',
            supportsAllDrives: true,
          });

          if (existingFile.data.files.length > 0) {
            const existing = existingFile.data.files[0];
            if (existing.size == file.size) {
              console.log(`‚è© ƒê√£ t·ªìn t·∫°i video: ${file.name}`);
              console.log(`   K√≠ch th∆∞·ªõc: ${(file.size / (1024 * 1024)).toFixed(2)} MB`);
              return { success: true, file, skipped: true };
            } else {
              console.log(`‚ö†ÔøΩÔøΩ T·ªìn t·∫°i video c√πng t√™n nh∆∞ng kh√°c dung l∆∞·ª£ng:`);
              console.log(`   - Hi·ªán t·∫°i: ${(existing.size / (1024 * 1024)).toFixed(2)} MB`);
              console.log(`   - C·∫ßn t·∫£i: ${(file.size / (1024 * 1024)).toFixed(2)} MB`);
            }
          } else {
            console.log(`üÜï Video ch∆∞a t·ªìn t·∫°i, c·∫ßn t·∫£i m·ªõi`);
          }

          // Ki·ªÉm tra quy·ªÅn truy c·∫≠p file tr∆∞·ªõc khi t·∫£i
          const accessCheck = await this.checkFileAccess(file.id, file.name);
          if (!accessCheck.canDownload) {
            console.log(`‚ö†Ô∏è Kh√¥ng c√≥ quy·ªÅn t·∫£i tr·ª±c ti·∫øp video: ${file.name}`);
            console.log(`üîÑ Chuy·ªÉn sang ph∆∞∆°ng √°n thay th·∫ø...`);
            return { success: false, file, needAlternative: true };
          }

          console.log(`üîÑ Th·ª≠ t·∫£i tr·ª±c ti·∫øp qua API...`);
          console.log(`üíæ K√≠ch th∆∞·ªõc file: ${(file.size / (1024 * 1024)).toFixed(2)} MB`);
          console.log(`‚è≥ B·∫Øt ƒë·∫ßu t·∫£i...`);

          const startDownloadTime = Date.now();
          let downloadedSize = 0;
          this.lastProgressUpdate = Date.now();

          // T·∫°o temporary file ƒë·ªÉ l∆∞u video t·∫°m th·ªùi
          const tempFilePath = path.join(this.tempDir, `temp_${file.id}.mp4`);

          // T·ªëi ∆∞u cho m·∫°ng 1Gbps
          const BUFFER_SIZE = 1024 * 1024 * 32; // 32MB buffer - ph√π h·ª£p v·ªõi t·ªëc ƒë·ªô cao
          const CHUNK_SIZE = 1024 * 1024 * 16;  // 16MB chunks ƒë·ªÉ x·ª≠ l√Ω

          const response = await this.sourceDrive.files.get(
            {
              fileId: file.id,
              alt: "media",
              supportsAllDrives: true,
            },
            {
              responseType: "stream",
              timeout: 30000, // TƒÉng timeout cho request
            }
          );

          const writeStream = fs.createWriteStream(tempFilePath, {
            flags: 'w',
            highWaterMark: BUFFER_SIZE,
            autoClose: true
          });

          await new Promise((resolve, reject) => {
            response.data
              .on('data', chunk => {
                downloadedSize += chunk.length;
                const elapsedTime = (Date.now() - startDownloadTime) / 1000;
                const downloadSpeed = (downloadedSize / (1024 * 1024)) / elapsedTime;
                const progress = (downloadedSize / file.size) * 100;

                if (Date.now() - this.lastProgressUpdate > 2000) {
                  console.log(`‚¨áÔ∏è ${file.name} - ƒêang t·∫£i: ${progress.toFixed(1)}% - T·ªëc ƒë·ªô: ${downloadSpeed.toFixed(2)} MB/s`);
                  this.lastProgressUpdate = Date.now();
                }
              })
              .on('end', () => {
                writeStream.end();
                resolve();
              })
              .on('error', error => {
                writeStream.end();
                reject(error);
              })
              .pipe(writeStream, { 
                end: true,
                highWaterMark: BUFFER_SIZE
              });

            // T·ªëi ∆∞u event loop v√† memory
            if (typeof process.send === 'function') {
              process.send('download');
            }
            
            // TƒÉng priority cho process n√†y
            if (process.platform === 'linux') {
              try {
                process.setpriority(process.pid, -10);
              } catch (e) {}
            }
          });

          // ƒê·∫£m b·∫£o stream ƒë∆∞·ª£c ƒë√≥ng ƒë√∫ng c√°ch
          writeStream.on('error', (error) => {
            console.error(`‚ùå L·ªói ghi file: ${error.message}`);
            writeStream.end();
          });

          const downloadTime = (Date.now() - startDownloadTime) / 1000;
          const avgDownloadSpeed = (file.size / (1024 * 1024)) / downloadTime;
          console.log(`\n‚úÖ ${file.name} - ƒê√£ t·∫£i xong - T·ªëc ƒë·ªô TB: ${avgDownloadSpeed.toFixed(2)} MB/s - Th·ªùi gian: ${downloadTime.toFixed(1)}s`);

          console.log(`\nüì§ ${file.name} - ƒêang upload l√™n drive ƒë√≠ch...`);
          const startUploadTime = Date.now();
          let uploadedSize = 0;

          const fileStream = fs.createReadStream(tempFilePath);
          const uploadResponse = await this.targetDrive.files.create({
            requestBody: {
              name: file.name,
              parents: [this.currentTargetFolderId],
              mimeType: file.mimeType,
            },
            media: {
              mimeType: file.mimeType,
              body: fileStream,
            },
            fields: "id, name",
            supportsAllDrives: true,
          });

          const uploadTime = (Date.now() - startUploadTime) / 1000;
          const avgUploadSpeed = (file.size / (1024 * 1024)) / uploadTime;

          console.log(`\n‚úÖ ${file.name} - ƒê√£ upload xong`);
          console.log(`‚ö° T·ªëc ƒë·ªô upload TB: ${avgUploadSpeed.toFixed(2)} MB/s`);
          console.log(`‚è±Ô∏è T·ªïng th·ªùi gian: ${(downloadTime + uploadTime).toFixed(1)} gi√¢y`);

          // X√≥a file t·∫°m
          fs.unlinkSync(tempFilePath);
          this.stats.videosProcessed++;

          // V√¥ hi·ªáu h√≥a quy·ªÅn sau khi upload th√†nh c√¥ng
          try {
            await this.targetDrive.files.update({
              fileId: uploadResponse.data.id,
              requestBody: {
                copyRequiresWriterPermission: true,
                viewersCanCopyContent: false,
                writersCanShare: false,
                sharingUser: null,
                permissionIds: []
              },
              supportsAllDrives: true,
            });

            console.log(`üîí ƒê√£ v√¥ hi·ªáu h√≥a c√°c quy·ªÅn chia s·∫ª cho: ${file.name}`);
          } catch (permError) {
            console.error(`‚ö†Ô∏è L·ªói c·∫•u h√¨nh quy·ªÅn:`, permError.message);
          }

          return { success: true, file };
        } catch (error) {
          attempt++;
          if (error.message.includes('timeout') && attempt < MAX_RETRIES) {
            console.log(`‚ö†Ô∏è Timeout, th·ª≠ l·∫°i l·∫ßn ${attempt + 1}...`);
            await new Promise(resolve => setTimeout(resolve, 5000)); // ƒê·ª£i 5s tr∆∞·ªõc khi th·ª≠ l·∫°i
            continue;
          }
          throw error; // N√©m l·ªói n·∫øu kh√¥ng ph·∫£i timeout ho·∫∑c ƒë√£ h·∫øt s·ªë l·∫ßn th·ª≠
        }
      }

      if (error.message.includes('timeout')) {
        console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i tr·ª±c ti·∫øp do timeout: ${file.name}`);
        return { success: false, file, needAlternative: true };
      }
      if (error.message.includes('userRateLimitExceeded') || 
          error.message.includes('quotaExceeded')) {
        console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i tr·ª±c ti·∫øp do limit: ${file.name}`);
        return { success: false, file, needAlternative: true };
      }

      console.error(`‚ùå L·ªói x·ª≠ l√Ω video "${file.name}":`, error.message);
      return { success: false, file, error };
    } catch (error) {
      if (error.message.includes('timeout')) {
        console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i tr·ª±c ti·∫øp do timeout: ${file.name}`);
        return { success: false, file, needAlternative: true };
      }
      if (error.message.includes('userRateLimitExceeded') || 
          error.message.includes('quotaExceeded')) {
        console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i tr·ª±c ti·∫øp do limit: ${file.name}`);
        return { success: false, file, needAlternative: true };
      }

      console.error(`‚ùå L·ªói x·ª≠ l√Ω video "${file.name}":`, error.message);
      return { success: false, file, error };
    }
  }

  async listAccessibleFolders() {
    try {
      console.log("\nüìÇ ƒêang t·∫£i danh s√°ch folder t·ª´ t√†i kho·∫£n source...");
      return await this.listFoldersInParent('root');
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch folder:", error.message);
      return [];
    }
  }

  async listFoldersInParent(parentId) {
    try {
      const response = await this.sourceDrive.files.list({
        q: `mimeType='application/vnd.google-apps.folder' and '${parentId}' in parents and trashed=false`,
        fields: 'files(id, name)',
        orderBy: 'name',
        pageSize: 1000,
        spaces: 'drive',
        includeItemsFromAllDrives: true,
        supportsAllDrives: true
      });

      const folders = response.data.files || [];
      return folders;
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch folder:", error.message);
      return [];
    }
  }

  async checkExistingFile(fileName, folderId) {
    try {
      console.log(`üîç Ki·ªÉm tra file: ${fileName}`);
      
      const query = `name='${fileName}' and '${folderId}' in parents and trashed=false`;
      const response = await this.targetDrive.files.list({
        q: query,
        fields: "files(id, name, size)",
        supportsAllDrives: true
      });

      if (response.data.files.length > 0) {
        const existingFile = response.data.files[0];
        console.log(`üìÅ ƒê√£ t·ªìn t·∫°i - Size: ${(existingFile.size / (1024 * 1024)).toFixed(2)} MB`);
        return {
          success: true,
          skipped: true,
          uploadedFile: existingFile
        };
      }
      
      console.log(`üÜï File ch∆∞a t·ªìn t·∫°i, c·∫ßn t·∫£i m·ªõi`);
      return null;
    } catch (error) {
      console.error(`‚ùå L·ªói ki·ªÉm tra file ${fileName}:`, error.message);
      return null;
    }
  }
}

module.exports = DriveAPI;
