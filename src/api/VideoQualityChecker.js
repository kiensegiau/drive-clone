const readline = require('readline');

class VideoQualityChecker {
  constructor(oauth2Client, drive, processLogger) {
    this.oauth2Client = oauth2Client;
    this.drive = drive;
    this.processLogger = processLogger;
    this.userEmail = null;
    this.cache = new Map();

    this.REQUEST_DELAY = 10;
    this.QUOTA_DELAY = 1000;
    this.MAX_RETRIES = 5;
    this.CONCURRENT_COPIES = 5;
    this.COPY_BATCH_SIZE = 10;
    this.INITIAL_DELAY = 1000;
    this.MAX_DELAY = 64000;
    this.QUOTA_RESET_TIME = 60000;
  }

  async delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  async withRetry(operation, depth = 0) {
    let delay = this.INITIAL_DELAY;

    for (let attempt = 0; attempt < this.MAX_RETRIES; attempt++) {
      try {
        const result = await operation();
        return result;
      } catch (error) {
        console.log(
          `üîç L·ªói API (attempt ${attempt + 1}/${this.MAX_RETRIES}):`,
          error.message
        );

        if (error.code === 429 || error.message.includes('quota')) {
          // X·ª≠ l√Ω quota exceeded t·ªët h∆°n
          const waitTime = this.QUOTA_RESET_TIME;
          console.log(`‚ö†Ô∏è ƒê·∫°t gi·ªõi h·∫°n API, ƒë·ª£i ${waitTime/1000}s ƒë·ªÉ reset quota...`);
          await this.delay(waitTime);
          continue;
        }

        if (error.code === 403) {
          console.log("‚ö†Ô∏è L·ªói quy·ªÅn truy c·∫≠p, ƒë·ª£i 1s v√† th·ª≠ l·∫°i...");
          await this.delay(this.QUOTA_DELAY); 
          continue;
        }

        // C√°c l·ªói kh√°c th√¨ tƒÉng delay theo c·∫•p s·ªë nh√¢n
        await this.delay(delay);
        delay = Math.min(delay * 2, this.MAX_DELAY);
        
        if (attempt === this.MAX_RETRIES - 1) {
          throw error; // N√©m l·ªói ·ªü l·∫ßn th·ª≠ cu·ªëi c√πng
        }
      }
    }

    throw new Error(`ƒê√£ th·ª≠ ${this.MAX_RETRIES} l·∫ßn nh∆∞ng kh√¥ng th√†nh c√¥ng`);
  }

  async getUserEmail() {
    if (!this.userEmail) {
      const response = await this.drive.about.get({
        fields: "user(emailAddress)",
      });
      this.userEmail = response.data.user.emailAddress;
    }
    return this.userEmail;
  }

  async checkFolderVideoQuality(folderId, depth = 0) {
    if (this.cache.has(folderId)) {
      return this.cache.get(folderId);
    }

    const indent = "  ".repeat(depth);
    const results = {
      totalVideos: 0,
      resolution: {
        "1080p": 0,
        "720p": 0,
        "480p": 0,
        "360p": 0,
        lower: 0,
        unknown: 0,
      },
      details: [],
    };

    try {
      const userEmail = await this.getUserEmail();

      let folderInfo;
      try {
        folderInfo = await this.withRetry(async () => {
          return await this.drive.files.get({
            fileId: folderId,
            fields: "id, name, capabilities, shared, owners, permissions",
            supportsAllDrives: true,
            supportsTeamDrives: true,
          });
        }, depth);

        const folder = folderInfo.data;

        const isOwner =
          folder.owners &&
          folder.owners.some((owner) => owner.emailAddress === userEmail);
        const canAccess =
          folder.capabilities?.canReadDrive ||
          folder.capabilities?.canRead ||
          folder.capabilities?.canEdit ||
          isOwner;

        if (!canAccess) {
          console.log(
            `‚ö†Ô∏è ƒêang ki·ªÉm tra quy·ªÅn truy c·∫≠p cho folder "${folder.name}"...`
          );
          console.log(`üîç Email ng∆∞·ªùi d√πng: ${userEmail}`);
          console.log(
            `üîç Tr·∫°ng th√°i chia s·∫ª: ${
              folder.shared ? "ƒê√£ chia s·∫ª" : "Ch∆∞a chia s·∫ª"
            }`
          );

          throw new Error(`Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p folder "${folder.name}". Vui l√≤ng ki·ªÉm tra:
1. Folder ƒë√£ ƒë∆∞·ª£c chia s·∫ª v·ªõi email ${userEmail}
2. B·∫°n c√≥ quy·ªÅn xem folder n√†y
3. Folder kh√¥ng b·ªã x√≥a ho·∫∑c n·∫±m trong th√πng r√°c`);
        }

        if (!folder.shared) {
          console.log("‚ö†Ô∏è L∆∞u √Ω: Folder n√†y ch∆∞a ƒë∆∞·ª£c chia s·∫ª");
        }
      } catch (error) {
        if (error.code === 404 || error.message.includes("File not found")) {
          throw new Error(`Kh√¥ng t√¨m th·∫•y folder. Vui l√≤ng ki·ªÉm tra:
1. ID folder ch√≠nh x√°c
2. URL chia s·∫ª c√≤n hi·ªáu l·ª±c
3. Folder kh√¥ng b·ªã x√≥a
4. B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n ${userEmail}`);
        }
        throw error;
      }

      await this.withRetry(async () => {
        await this.drive.files.get({
          fileId: folderId,
          fields: "id, name",
          supportsAllDrives: true,
        });
      }, depth);

      const response = await this.withRetry(async () => {
        return this.drive.files.list({
          q: `'${folderId}' in parents and trashed = false`,
          fields: "files(id, name, mimeType, videoMediaMetadata)",
          pageSize: 100,
          supportsAllDrives: true,
          includeItemsFromAllDrives: true,
          supportsTeamDrives: true,
        });
      }, depth);

      const files = response.data.files;
      const videoFiles = files.filter((f) => f.mimeType.includes("video"));

      console.log(`${indent}üé• T√¨m th·∫•y ${videoFiles.length} video trong folder`);
      
      results.totalVideos = videoFiles.length;

      for (let i = 0; i < videoFiles.length; i += this.COPY_BATCH_SIZE) {
        const batch = videoFiles.slice(i, i + this.COPY_BATCH_SIZE);
        const promises = batch.map((video) =>
          this.checkVideoQuality(video, indent)
        );

        const batchResults = await Promise.all(promises);

        for (const videoDetails of batchResults) {
          results.details.push(videoDetails);
          if (!videoDetails.height) {
            results.resolution["unknown"]++;
          } else if (videoDetails.height >= 1080) {
            results.resolution["1080p"]++;
          } else if (videoDetails.height >= 720) {
            results.resolution["720p"]++;
          } else if (videoDetails.height >= 480) {
            results.resolution["480p"]++;
          } else if (videoDetails.height >= 360) {
            results.resolution["360p"]++;
          } else {
            results.resolution["lower"]++;
          }
        }
      }

      const subFolders = files.filter(
        (f) => f.mimeType === "application/vnd.google-apps.folder"
      );
      const subFolderPromises = subFolders.map((folder) =>
        this.checkFolderVideoQuality(folder.id, depth + 1)
      );

      const subResults = await Promise.all(subFolderPromises);

      for (const subResult of subResults) {
        results.totalVideos += subResult.totalVideos;
        Object.keys(results.resolution).forEach((key) => {
          results.resolution[key] += subResult.resolution[key] || 0;
        });
        results.details = results.details.concat(subResult.details);
      }

      console.log(`${indent}üìä K·∫øt qu·∫£ ki·ªÉm tra folder:`);
      console.log(`${indent}   - T·ªïng s·ªë video: ${results.totalVideos}`);
      console.log(
        `${indent}   - Full HD (1080p+): ${results.resolution["1080p"]}`
      );
      console.log(`${indent}   - HD (720p): ${results.resolution["720p"]}`);
      console.log(`${indent}   - SD (480p): ${results.resolution["480p"]}`);
      console.log(`${indent}   - 360p: ${results.resolution["360p"]}`);
      console.log(
        `${indent}   - Th·∫•p h∆°n 360p: ${results.resolution["lower"]}`
      );
      console.log(
        `${indent}   - Kh√¥ng x√°c ƒë·ªãnh: ${results.resolution["unknown"]}`
      );

      const total = results.totalVideos;
      if (total > 0) {
        console.log(`\n${indent}üìà T·ª∑ l·ªá ph√¢n b·ªë:`);
        Object.entries(results.resolution).forEach(([key, value]) => {
          const percentage = ((value / total) * 100).toFixed(1);
          console.log(`${indent}   - ${key}: ${percentage}%`);
        });
      }

      this.cache.set(folderId, results);
      return results;
    } catch (error) {
      console.error(`${" ".repeat(depth * 2)}‚ùå L·ªói:`, error.message);
      throw error;
    }
  }

  async checkVideoQuality(video, indent = "") {
    const result = {
      name: video.name,
      id: video.id,
      width: 0,
      height: 0,
      duration: 0,
      resolution: "unknown",
      status: "unknown",
    };

    try {
      const videoInfo = await this.drive.files.get({
        fileId: video.id,
        fields: "videoMediaMetadata,size,createdTime,modifiedTime",
        supportsAllDrives: true,
      });

      const metadata = videoInfo.data.videoMediaMetadata;
      if (metadata && metadata.width && metadata.height) {
        result.width = metadata.width;
        result.height = metadata.height;
        result.duration = metadata.durationMillis;
        result.status = "success";

        if (result.height >= 1080) {
          result.resolution = "1080p+";
        } else if (result.height >= 720) {
          result.resolution = "720p";
        } else if (result.height >= 480) {
          result.resolution = "480p";
        } else if (result.height >= 360) {
          result.resolution = "360p";
        } else {
          result.resolution = `${result.height}p`;
        }

        console.log(
          `${indent}‚úì ${video.name}: ${result.width}x${result.height} (${result.resolution})`
        );
      } else {
        result.status = "no_metadata";
        result.fileSize = videoInfo.data.size;
        result.createdTime = videoInfo.data.createdTime;
        result.modifiedTime = videoInfo.data.modifiedTime;

        console.log(
          `${indent}‚ö†Ô∏è ${
            video.name
          }: Kh√¥ng l·∫•y ƒë∆∞·ª£c metadata - Size: ${formatBytes(
            result.fileSize
          )}, Upload: ${new Date(result.createdTime).toLocaleString()}`
        );
      }
    } catch (error) {
      result.status = "error";
      result.error = error.message;
      console.error(
        `${indent}‚ùå Li l·∫•y th√¥ng tin video ${video.name}:`,
        error.message
      );
    }

    return result;
  }

  async copyFolder(sourceFolderId, destinationFolderId, depth = 0) {
    const indent = "  ".repeat(depth);
    try {
      // L·∫•y th√¥ng tin folder ngu·ªìn
      let sourceFolder;
      try {
        sourceFolder = await this.withRetry(async () => {
          return this.drive.files.get({
            fileId: sourceFolderId,
            fields: "name",
            supportsAllDrives: true,
          });
        });
      } catch (error) {
        console.error(
          `${indent}‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin folder ngu·ªìn:`,
          error.message
        );
        return null;
      }

      // Ki·ªÉm tra folder ƒë√£ t·ªìn t·∫°i
      let existingFolder;
      try {
        existingFolder = await this.checkFileExists(
          sourceFolder.data.name,
          destinationFolderId,
          "application/vnd.google-apps.folder"
        );
      } catch (error) {
        console.error(
          `${indent}‚ö†Ô∏è L·ªói ki·ªÉm tra folder t·ªìn t·∫°i:`,
          error.message
        );
      }

      let newFolder;
      if (existingFolder) {
        console.log(
          `${indent}üìÇ Folder "${sourceFolder.data.name}" ƒë√£ t·ªìn t·∫°i, s·ª≠ d·ª•ng folder hi·ªán c√≥`
        );
        newFolder = { data: existingFolder };
      } else {
        try {
          newFolder = await this.withRetry(async () => {
            return this.drive.files.create({
              requestBody: {
                name: sourceFolder.data.name,
                mimeType: "application/vnd.google-apps.folder",
                parents: [destinationFolderId],
              },
              supportsAllDrives: true,
            });
          });
          console.log(
            `${indent}üìÇ ƒê√£ t·∫°o folder m·ªõi "${sourceFolder.data.name}"`
          );
        } catch (error) {
          console.error(`${indent}‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o folder m·ªõi:`, error.message);
          return null;
        }
      }

      // L·∫•y danh s√°ch files v√† folders
      let response;
      try {
        response = await this.withRetry(async () => {
          return this.drive.files.list({
            q: `'${sourceFolderId}' in parents and trashed = false`,
            fields: "files(id, name, mimeType)",
            pageSize: 100,
            supportsAllDrives: true,
            includeItemsFromAllDrives: true,
          });
        });
      } catch (error) {
        console.error(
          `${indent}‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y danh s√°ch files:`,
          error.message
        );
        return null;
      }

      const items = response.data.files;
      const files = items.filter(
        (item) => item.mimeType !== "application/vnd.google-apps.folder"
      );
      const folders = items.filter(
        (item) => item.mimeType === "application/vnd.google-apps.folder"
      );

      for (let i = 0; i < files.length; i += this.COPY_BATCH_SIZE) {
        const batch = files.slice(i, i + this.COPY_BATCH_SIZE);
        const copyPromises = batch.map(async (file) => {
          const result = await this.copyFile(
            file.id,
            newFolder.data.id,
            depth + 1
          ).catch((error) => {
            console.error(
              `${indent}  ‚ö†Ô∏è L·ªói copy file ${file.name}:`,
              error.message
            );
            return null;
          });
          if (result) {
            console.log(`${indent}‚úÖ ƒê√£ sao ch√©p "${file.name}"`);
          }
          return result;
        });

        // X·ª≠ l√Ω ƒë·ªìng th·ªùi nhi·ªÅu file h∆°n
        await Promise.allSettled(copyPromises);
        await this.delay(500); // Gi·∫£m delay gi·ªØa c√°c batch xu·ªëng 500ms
      }

      // Copy folders v·ªõi delay ng·∫Øn h∆°n
      for (const folder of folders) {
        try {
          const result = await this.copyFolder(
            folder.id,
            newFolder.data.id,
            depth + 1
          );
          if (result) {
            console.log(`${indent}‚úÖ ƒê√£ sao ch√©p folder "${folder.name}"`);
          }
          await this.delay(10); // Gi·∫£m delay gi·ªØa c√°c folder xu·ªëng 10ms
        } catch (error) {
          console.error(
            `${indent}  ‚ö†Ô∏è L·ªói copy folder ${folder.name}:`,
            error.message
          );
          continue;
        }
      }

      console.log(
        `${indent}‚úÖ ƒê√£ sao ch√©p xong folder "${sourceFolder.data.name}"`
      );
      return newFolder.data;
    } catch (error) {
      console.error(`${indent}‚ö†Ô∏è L·ªói:`, error.message);
      return null; // Tr·∫£ v·ªÅ null thay v√¨ throw error
    }
  }

  async copyFile(fileId, destinationFolderId, depth = 0) {
    const indent = "  ".repeat(depth);
    let fileName = "";

    try {
      const sourceFile = await this.withRetry(async () => {
        return this.drive.files.get({
          fileId: fileId,
          fields: "name, size, mimeType",
          supportsAllDrives: true,
        });
      });

      fileName = sourceFile.data.name;

      const existingFile = await this.checkFileExists(
        fileName,
        destinationFolderId,
        sourceFile.data.mimeType
      );

      if (existingFile) {
        console.log(`${indent}‚è© File "${fileName}" ƒë√£ t·ªìn t·∫°i, b·ªè qua`);
        return existingFile;
      }

      const copiedFile = await this.withRetry(async () => {
        return this.drive.files.copy({
          fileId: fileId,
          requestBody: {
            name: fileName,
            parents: [destinationFolderId],
            copyRequiresWriterPermission: false,
          },
          supportsAllDrives: true,
        });
      });

      console.log(`${indent}‚úÖ ƒê√£ sao ch√©p "${fileName}"`);
      return copiedFile.data;
    } catch (error) {
      console.error(`${indent}‚ö†Ô∏è L·ªói copy file ${fileName}:`, error.message);
      return null; // Tr·∫£ v·ªÅ null thay v√¨ throw error
    }
  }

  async copyToBackupFolder(sourceId) {
    try {
      const existingBackup = await this.checkFileExists(
        "B·∫£n sao",
        "root",
        "application/vnd.google-apps.folder"
      );

      let backupFolder;
      if (existingBackup) {
        backupFolder = existingBackup;
        console.log('üìÇ ƒê√£ t√¨m th·∫•y folder "B·∫£n sao"');
      } else {
        try {
          backupFolder = await this.withRetry(async () => {
            return this.drive.files.create({
              requestBody: {
                name: "B·∫£n sao",
                mimeType: "application/vnd.google-apps.folder",
                parents: ["root"],
              },
            });
          });
          console.log('üìÇ ƒê√£ t·∫°o m·ªõi folder "B·∫£n sao"');
        } catch (error) {
          console.error("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o folder B·∫£n sao:", error.message);
          return null;
        }
      }

      const sourceInfo = await this.withRetry(async () => {
        return this.drive.files.get({
          fileId: sourceId,
          fields: "name, mimeType",
          supportsAllDrives: true,
        });
      });

      await this.delay(this.REQUEST_DELAY);

      if (sourceInfo.data.mimeType === "application/vnd.google-apps.folder") {
        await this.copyFolder(sourceId, backupFolder.id);
      } else {
        await this.copyFile(sourceId, backupFolder.id);
      }

      console.log('‚úÖ ƒê√£ sao ch√©p xong v√†o folder "B·∫£n sao"');
      return backupFolder.id;
    } catch (error) {
      console.error("‚ö†Ô∏è L·ªói:", error.message);
      return null;
    }
  }

  // Th√™m ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ ki·ªÉm tra file/folder t·ªìn t·∫°i
  async checkFileExists(name, parentId, mimeType) {
    try {
      const response = await this.withRetry(async () => {
        return this.drive.files.list({
          q: `name='${name}' and '${parentId}' in parents and mimeType='${mimeType}' and trashed=false`,
          fields: "files(id, name)",
          supportsAllDrives: true,
          includeItemsFromAllDrives: true,
        });
      });
      return response.data.files[0] || null;
    } catch (error) {
      console.error("‚ùå L·ªói ki·ªÉm tra file:", error.message);
      return null;
    }
  }

  // Ph∆∞∆°ng th·ª©c 3: T·∫°o b·∫£n sao ƒë·ªÉ x·ª≠ l√Ω sau
  async createCopiesForProcessing(folderId) {
    try {
      console.log('üîÑ B·∫Øt ƒë·∫ßu t·∫°o b·∫£n sao cho c√°c video ch·∫•t l∆∞·ª£ng th·∫•p...');
      
      const results = await this.checkFolderVideoQuality(folderId);
      
      // S·ª≠a ƒëi·ªÅu ki·ªán l·ªçc
      const videosToReprocess = results.details.filter(video => {
        // Video ch·∫•t l∆∞·ª£ng th·∫•p
        const isLowQuality = video.height && video.height <= 360;
        
        // Video kh√¥ng x√°c ƒë·ªãnh
        const isUnknown = 
          video.resolution === 'unknown' || 
          !video.height || 
          video.status === 'no_metadata';

        return isLowQuality || isUnknown;
      });

      console.log(`\nüìù T√¨m th·∫•y ${videosToReprocess.length} video c·∫ßn x·ª≠ l√Ω l·∫°i`);
      console.log('   Bao g·ªìm:');
      console.log(`   - ${videosToReprocess.filter(v => !v.height || v.resolution === 'unknown' || v.status === 'no_metadata').length} video kh√¥ng x√°c ƒë·ªãnh ch·∫•t l∆∞·ª£ng`);
      console.log(`   - ${videosToReprocess.filter(v => v.height && v.height <= 360).length} video ch·∫•t l∆∞·ª£ng th·∫•p (360p tr·ªü xu·ªëng)`);

      // X√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });

      const proceed = await new Promise(resolve => {
        rl.question('\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c x·ª≠ l√Ω c√°c video n√†y? (y/n): ', answer => {
          rl.close();
          resolve(answer.toLowerCase() === 'y');
        });
      });

      if (!proceed) {
        console.log('‚ùå ƒê√£ h·ªßy thao t√°c');
        return;
      }

      // Ti·∫øp t·ª•c x·ª≠ l√Ω c√°c video
      for (const video of videosToReprocess) {
        try {
          console.log(`\nüé¨ ƒêang x·ª≠ l√Ω: ${video.name}`);
          
          // T·∫°o timestamp duy nh·∫•t
          const timestamp = new Date().getTime();
          const originalQuality = video.height ? `${video.height}p` : 'unknown';
          
          // T·∫°o m√£ hash ng·∫Øn t·ª´ t√™n g·ªëc
          const fileHash = require('crypto')
            .createHash('md5')
            .update(video.name)
            .digest('hex')
            .substring(0, 6);
          
          // T·∫°o 2 b·∫£n sao v·ªõi t√™n an to√†n h∆°n
          for (let i = 1; i <= 2; i++) {
            // T√™n file m·ªõi format: REPROCESS_[timestamp]_[hash]_[copy number]
            const copyName = `REPROCESS_${timestamp}_${fileHash}_${i}`;
            console.log(`üìë T·∫°o b·∫£n sao ${i}...`);
            
            await this.withRetry(async () => {
              return this.drive.files.copy({
                fileId: video.id,
                requestBody: {
                  name: copyName,
                  // Gi·∫£m k√≠ch th∆∞·ªõc metadata
                  properties: {
                    h: fileHash,           // hash c·ªßa t√™n g·ªëc
                    t: `${timestamp}`,     // timestamp
                    n: `${i}`,             // s·ªë th·ª© t·ª± b·∫£n sao
                    q: originalQuality     // ch·∫•t l∆∞·ª£ng g·ªëc
                  },
                  parents: [folderId],
                },
                supportsAllDrives: true,
              });
            });
            
            // L∆∞u mapping t√™n file v√†o m·ªôt file JSON ri√™ng
            await this.saveFileMapping(fileHash, {
              originalName: video.name,
              timestamp: timestamp,
              quality: originalQuality
            });
            
            console.log(`‚úÖ ƒê√£ t·∫°o: ${copyName}`);
            await this.delay(5000);
          }

        } catch (error) {
          console.error(`‚ùå L·ªói x·ª≠ l√Ω video ${video.name}:`, error.message);
          continue;
        }
      }

      console.log('\n‚úÖ ƒê√£ t·∫°o xong c√°c b·∫£n sao. Vui l√≤ng ƒë·ª£i v√†i gi·ªù ƒë·ªÉ Drive x·ª≠ l√Ω xong.');
      console.log('üí° Sau ƒë√≥ s·ª≠ d·ª•ng ch·ª©c nƒÉng 4 ƒë·ªÉ ch·ªçn v√† ƒë·ªïi t√™n b·∫£n ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t.');
      
    } catch (error) {
      console.error('‚ùå L·ªói:', error.message);
      throw error;
    }
  }

  // Th√™m ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ l∆∞u mapping t√™n file
  async saveFileMapping(fileHash, data) {
    try {
      const fs = require('fs');
      const path = require('path');
      const mappingFile = path.join(__dirname, 'file_mapping.json');
      
      // ƒê·ªçc file mapping hi·ªán c√≥ ho·∫∑c t·∫°o m·ªõi
      let mapping = {};
      if (fs.existsSync(mappingFile)) {
        mapping = JSON.parse(fs.readFileSync(mappingFile, 'utf8'));
      }
      
      // Th√™m mapping m·ªõi
      mapping[fileHash] = data;
      
      // L∆∞u l·∫°i file
      fs.writeFileSync(mappingFile, JSON.stringify(mapping, null, 2));
    } catch (error) {
      console.error('‚ö†Ô∏è L·ªói l∆∞u file mapping:', error.message);
    }
  }

  // Ph∆∞∆°ng th·ª©c 4: L·ªçc v√† kh√¥i ph·ª•c t√™n cho b·∫£n ch·∫•t l∆∞·ª£ng cao nh·∫•t
  async selectBestQualityCopies(folderId) {
    try {
      console.log('üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra c√°c b·∫£n sao...');

      // ƒê·ªçc file mapping
      const fs = require('fs');
      const path = require('path');
      const mappingFile = path.join(__dirname, 'file_mapping.json');
      let fileMapping = {};
      
      if (fs.existsSync(mappingFile)) {
        fileMapping = JSON.parse(fs.readFileSync(mappingFile, 'utf8'));
      }

      // T√¨m c√°c file c·∫ßn x·ª≠ l√Ω
      const response = await this.withRetry(async () => {
        return this.drive.files.list({
          q: `'${folderId}' in parents and name contains 'REPROCESS_' and trashed = false`,
          fields: "files(id, name, properties, videoMediaMetadata)",
          supportsAllDrives: true,
        });
      });

      // Nh√≥m c√°c b·∫£n sao theo timestamp
      const copyGroups = new Map();
      for (const file of response.data.files) {
        const timestamp = file.properties?.t;
        const fileHash = file.properties?.h;
        
        if (timestamp && fileHash) {
          if (!copyGroups.has(timestamp)) {
            copyGroups.set(timestamp, []);
          }
          // Th√™m th√¥ng tin mapping v√†o file
          file.originalInfo = fileMapping[fileHash];
          copyGroups.get(timestamp).push(file);
        }
      }

      console.log(`üìù T√¨m th·∫•y ${copyGroups.size} nh√≥m b·∫£n sao c·∫ßn x·ª≠ l√Ω`);

      for (const [timestamp, copies] of copyGroups) {
        try {
          console.log(`\nüé¨ ƒêang x·ª≠ l√Ω nh√≥m ${timestamp}...`);

          // Ki·ªÉm tra ch·∫•t l∆∞·ª£ng c·ªßa t·∫•t c·∫£ b·∫£n sao trong nh√≥m
          const copyQualities = await Promise.all(
            copies.map(async (copy) => {
              const quality = await this.checkVideoQuality(copy);
              return {
                file: copy,
                quality: quality
              };
            })
          );

          // Hi·ªÉn th·ªã th√¥ng tin ch·∫•t l∆∞·ª£ng
          console.log('\nüìä K·∫øt qu·∫£ ch·∫•t l∆∞·ª£ng:');
          copyQualities.forEach((copy, index) => {
            console.log(`B·∫£n ${index + 1}: ${copy.quality.width}x${copy.quality.height}`);
          });

          // T√¨m b·∫£n c√≥ ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t
          const bestCopy = copyQualities.reduce((best, current) => {
            if (!best || (current.quality.height > best.quality.height)) {
              return current;
            }
            return best;
          }, null);

          if (bestCopy && bestCopy.quality.height > 0) {
            // Kh√¥i ph·ª•c t√™n g·ªëc cho b·∫£n t·ªët nh·∫•t
            const originalName = bestCopy.file.originalInfo.originalName;
            console.log(`‚ú® ƒê·ªïi t√™n b·∫£n ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t (${bestCopy.quality.height}p) v·ªÅ "${originalName}"`);
            
            await this.withRetry(async () => {
              return this.drive.files.update({
                fileId: bestCopy.file.id,
                requestBody: {
                  name: originalName
                },
                supportsAllDrives: true,
              });
            });

            // X√≥a c√°c b·∫£n c√≤n l·∫°i
            for (const copy of copies) {
              if (copy.id !== bestCopy.file.id) {
                await this.withRetry(async () => {
                  return this.drive.files.delete({
                    fileId: copy.id,
                    supportsAllDrives: true,
                  });
                });
              }
            }
          } else {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n n√†o c√≥ ch·∫•t l∆∞·ª£ng t·ªët, gi·ªØ nguy√™n t·∫•t c·∫£ b·∫£n sao');
          }

        } catch (error) {
          console.error(`‚ùå L·ªói x·ª≠ l√Ω nh√≥m ${timestamp}:`, error.message);
          continue;
        }
      }

      console.log('\n‚úÖ Ho√†n th√†nh vi·ªác ch·ªçn l·ªçc v√† ƒë·ªïi t√™n');
      
    } catch (error) {
      console.error('‚ùå L·ªói:', error.message);
      throw error;
    }
  }
}

function formatBytes(bytes, decimals = 2) {
  if (!bytes) return "0 Bytes";
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
}

module.exports = VideoQualityChecker;
