const path = require("path");
const fs = require("fs");
const fsp = require("fs").promises;
const ChromeManager = require("../ChromeManager");
const PDFDocument = require("pdfkit");

class DriveAPIDocsHandler {
  constructor(sourceDrive, targetDrive, tempDir, config) {
    this.sourceDrive = sourceDrive;
    this.targetDrive = targetDrive;
    this.tempDir = tempDir;
    this.config = config;
    this.chromeManager = ChromeManager.getInstance("pdf");
   
  }

  async convertDocsToPDF(fileId, outputPath, targetFolderId, originalFileName) {
    let browser = null;
    let page = null;

    try {
      
      browser = await this.chromeManager.getBrowser();
      page = await browser.newPage();

      // 1. Truy c·∫≠p URL edit tr∆∞·ªõc
      const editUrl = `https://docs.google.com/document/d/${fileId}/edit`;
      await page.goto(editUrl);
      
      // 2. ƒê·ª£i 1 gi√¢y cho t√†i li·ªáu load
      await new Promise((resolve) => setTimeout(resolve, 1000));
      
      // 3. T·∫Øt JavaScript
      await page.setJavaScriptEnabled(false);
      
      // 4. Chuy·ªÉn sang mobile view
      const mobileUrl = `https://docs.google.com/document/d/${fileId}/mobilebasic`;
      await page.goto(mobileUrl);
      
      // 5. L·∫•y HTML v√† CSS
      const content = await page.evaluate(() => {
        const styles = Array.from(document.querySelectorAll("style"))
          .map((style) => style.innerHTML)
          .join("\n");
        const html = document.querySelector(".doc-content").outerHTML;
        return {
          styles,
          html,
        };
      });

      // 6. T·∫°o file HTML t·∫°m v·ªõi n·ªôi dung v√† style
      const tempHtmlPath = path.join(this.tempDir, `${fileId}.html`);
      const htmlContent = `
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
                <style>
                    * {
                        margin: 0;
                        padding: 0;
                        box-sizing: border-box;
                    }
                    
                    body {
                        font-family: 'Roboto', Arial, sans-serif;
                        line-height: 1.6;
                        margin: 0;
                        padding: 0 40px;
                        width: 100% !important;
                    }
                    
                    table {
                        border-collapse: collapse;
                        width: 100% !important;
                        margin: 10px 0;
                    }
                    
                    td, th {
                        border: 1px solid #ddd;
                        padding: 8px;
                    }
                    
                    h1, h2, h3, h4, h5, h6 {
                        margin: 15px 0;
                        font-weight: 500;
                    }
                    
                    p {
                        margin: 10px 0;
                    }
                    
                    /* Override Google Docs styles */
                    .doc-content {
                        width: 100% !important;
                        max-width: none !important;
                        margin: 0 !important;
                        padding: 20px 0 !important;
                    }
                    
                    /* Override any container classes */
                    [class*="container"] {
                        width: 100% !important;
                        max-width: none !important;
                        margin: 0 !important;
                        padding: 0 !important;
                    }
                    
                    ${content.styles}
                </style>
            </head>
            <body>
                ${content.html}
            </body>
            </html>
        `;

      await fs.promises.writeFile(tempHtmlPath, htmlContent);
      
      // 7. M·ªü file HTML v√† chuy·ªÉn sang PDF
      await page.goto(`file://${tempHtmlPath}`);

      // ƒê·ª£i fonts load
      await page.waitForTimeout(1000);

      // ƒêi·ªÅu ch·ªânh viewport khi t·∫°o PDF
      await page.setViewport({
        width: 1200, // TƒÉng chi·ªÅu r·ªông viewport
        height: 800,
      });

      await page.pdf({
        path: outputPath,
        format: "A4",
        margin: {
          top: "20mm",
          right: "20mm",
          bottom: "20mm",
          left: "20mm",
        },
        printBackground: true,
        scale: 1.0, // ƒê·∫£m b·∫£o kh√¥ng b·ªã thu nh·ªè
      });
      console.log(`ƒê√£ t·∫°o file PDF: ${outputPath}`);

      // Upload file PDF l√™n Drive v·ªõi t√™n g·ªëc v√† v√†o folder ƒë√≠ch
      const uploadResult = await this.uploadToDrive(
        outputPath, 
        targetFolderId,
        originalFileName
      );

      if (!uploadResult.success) {
        throw new Error(`Upload th·∫•t b·∫°i: ${uploadResult.error}`);
      }

      console.log(`‚úÖ ƒê√£ upload file PDF l√™n Drive th√†nh c√¥ng`);

      // X√≥a file PDF t·∫°m sau khi upload th√†nh c√¥ng
      try {
        await fs.promises.unlink(outputPath);
        console.log(`üóëÔ∏è ƒê√£ x√≥a file PDF t·∫°m: ${outputPath}`);
      } catch (error) {
        console.error(`‚ö†Ô∏è L·ªói x√≥a file PDF t·∫°m ${outputPath}:`, error.message);
      }

      // X√≥a file HTML t·∫°m sau khi ho√†n t·∫•t
      try {
        await fs.promises.unlink(tempHtmlPath);
        console.log(`üóëÔ∏è ƒê√£ x√≥a file HTML t·∫°m: ${tempHtmlPath}`);
      } catch (error) {
        console.error(`‚ö†Ô∏è L·ªói x√≥a file HTML t·∫°m ${tempHtmlPath}:`, error.message);
      }

      return uploadResult;
    } catch (error) {
      console.error("L·ªói chuy·ªÉn ƒë·ªïi sang PDF:", error);
      throw error;
    } finally {
      if (page) await page.close();
      if (browser) this.chromeManager.releaseInstance(browser);
    }
  }

  async getDocxContent(fileId) {
    try {
      const response = await this.sourceDrive.files.get(
        {
          fileId: fileId,
          alt: "media",
        },
        {
          responseType: "arraybuffer",
        }
      );

      return response.data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y n·ªôi dung file DOCX:", error);
      throw error;
    }
  }

  async processDocsFile(file, targetFolderId) {
    try {
      const outputPath = path.join(this.tempDir, `${file.id}.pdf`);
      const originalFileName = file.name;

      const uploadResult = await this.convertDocsToPDF(
        file.id,
        outputPath,
        targetFolderId,
        originalFileName
      );

      return uploadResult;
    } catch (error) {
      console.error(`‚ùå L·ªói x·ª≠ l√Ω file Docs "${file.name}":`, error.message);
      throw error;
    }
  }

  async checkExistingFile(fileName, folderId) {
    try {
      const query = `name='${fileName}' and '${folderId}' in parents and trashed=false`;
      const response = await this.targetDrive.files.list({
        q: query,
        fields: "files(id, name, size)",
        supportsAllDrives: true,
      });

      if (response.data.files.length > 0) {
        const existingFile = response.data.files[0];
        console.log(
          `üìÅ ƒê√£ t·ªìn t·∫°i - Size: ${(existingFile.size / (1024 * 1024)).toFixed(
            2
          )} MB`
        );
        return existingFile;
      }

      console.log(`üÜï File ch∆∞a t·ªìn t·∫°i, c·∫ßn t·∫£i m·ªõi`);
      return null;
    } catch (error) {
      console.error(`‚ùå L·ªói ki·ªÉm tra file ${fileName}:`, error.message);
      return null;
    }
  }

  async uploadToDrive(filePath, targetFolderId, customFileName) {
    try {
      if (!fs.existsSync(filePath)) {
        throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${filePath}`);
      }

      const fileSize = fs.statSync(filePath).size;
      if (fileSize === 0) {
        throw new Error("File r·ªóng");
      }

      const fileName = customFileName || path.basename(filePath);

      // Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c ƒë√≠ch ch∆∞a
      const existingFile = await this.checkExistingFile(fileName, targetFolderId);
      if (existingFile) {
        console.log(`üìÅ File ƒë√£ t·ªìn t·∫°i: ${fileName}`);
        return {
          success: true,
          skipped: true,
          uploadedFile: existingFile,
        };
      }

      const fileMetadata = {
        name: fileName,
        parents: [targetFolderId],
      };

      const media = {
        mimeType: "application/pdf",
        body: fs.createReadStream(filePath),
      };

      // S·ª≠ d·ª•ng targetDrive ƒë·ªÉ upload
      const uploadResponse = await this.targetDrive.files.create({
        requestBody: fileMetadata,
        media: media,
        fields: "id, name, size",
        supportsAllDrives: true,
      });

      console.log(`\n‚úÖ Upload th√†nh c√¥ng: ${uploadResponse.data.name}`);

      // Thay ƒë·ªïi ph·∫ßn set permissions sau khi upload th√†nh c√¥ng
      try {
        // Sau ƒë√≥ c·∫≠p nh·∫≠t file ƒë·ªÉ v√¥ hi·ªáu h√≥a c√°c quy·ªÅn
        await this.targetDrive.files.update({
          fileId: uploadResponse.data.id,
          requestBody: {
            copyRequiresWriterPermission: true,
            viewersCanCopyContent: false,
            writersCanShare: false,
            sharingUser: null,
            permissionIds: [],
          },
          supportsAllDrives: true,
        });

        console.log(`üîí ƒê√£ v√¥ hi·ªáu h√≥a c√°c quy·ªÅn chia s·∫ª cho: ${fileName}`);
      } catch (permError) {
        console.error(`‚ö†Ô∏è L·ªói c·∫•u h√¨nh quy·ªÅn:`, permError.message);
      }

      return {
        success: true,
        uploadedFile: uploadResponse.data,
      };
    } catch (error) {
      console.error(`\n‚ùå L·ªói upload: ${error.message}`);
      return {
        success: false,
        error: error.message,
      };
    }
  }
}

module.exports = DriveAPIDocsHandler;
