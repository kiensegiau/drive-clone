const { google } = require("googleapis");
const { OAuth2Client } = require("google-auth-library");
const path = require("path");
const fs = require("fs");
const { NETWORK_CONFIG } = require("./config/constants");
const { credentials, SCOPES } = require("./config/auth");
const readline = require("readline");
const { getLongPath } = require("./utils/pathUtils");
const VideoQualityChecker = require("./api/VideoQualityChecker");

async function authenticate() {
  console.log("üîë ƒêang x√°c th·ª±c v·ªõi Drive API...");

  try {
    const oauth2Client = new OAuth2Client(
      credentials.client_id,
      credentials.client_secret,
      credentials.redirect_uris[0]
    );

    console.log("üîç Ki·ªÉm tra token...");
    let token;

    try {
      token = JSON.parse(fs.readFileSync("token.json"));
    } catch (err) {
      token = await createNewToken(oauth2Client);
    }

    oauth2Client.setCredentials(token);

    // Kh·ªüi t·∫°o Drive API
    const drive = google.drive({
      version: "v3",
      auth: oauth2Client,
    });

    // L·∫•y th√¥ng tin user
    const userInfo = await drive.about.get({
      fields: "user",
    });
    const userEmail = userInfo.data.user.emailAddress;

    console.log(`‚úÖ ƒê√£ x√°c th·ª±c th√†nh c√¥ng v·ªõi t√†i kho·∫£n: ${userEmail}`);
    return { oauth2Client, drive };
  } catch (error) {
    console.error("‚ùå L·ªói x√°c th·ª±c:", error.message);
    throw error;
  }
}

async function createNewToken(oauth2Client) {
  console.log("‚ö†Ô∏è T·∫°o token m·ªõi...");

  const authUrl = oauth2Client.generateAuthUrl({
    access_type: "offline",
    scope: SCOPES,
    prompt: "consent",
  });

  console.log("\nüì± Truy c·∫≠p URL n√†y ƒë·ªÉ x√°c th·ª±c:");
  console.log(authUrl);

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const code = await new Promise((resolve) => {
    rl.question("Nh·∫≠p m√£ code: ", (code) => {
      rl.close();
      resolve(code);
    });
  });

  try {
    const { tokens } = await oauth2Client.getToken(code);
    fs.writeFileSync("token.json", JSON.stringify(tokens));
    return tokens;
  } catch (err) {
    throw new Error(`L·ªói l·∫•y token: ${err.message}`);
  }
}

function extractFolderId(input) {
  // N·∫øu input ƒë√£ l√† ID thu·∫ßn t√∫y (kh√¥ng ch·ª©a URL)
  if (!input.includes("drive.google.com")) {
    return input;
  }

  // X·ª≠ l√Ω c√°c ƒë·ªãnh d·∫°ng URL kh√°c nhau
  try {
    const url = new URL(input);

    // ƒê·ªãnh d·∫°ng 1: folders/ID trong path
    const foldersMatch = input.match(/folders\/([a-zA-Z0-9\-_]+)/);
    if (foldersMatch && foldersMatch[1]) {
      return foldersMatch[1];
    }

    // ƒê·ªãnh d·∫°ng 2: id=ID trong query params
    const searchParams = url.searchParams;
    if (searchParams.has("id")) {
      return searchParams.get("id");
    }

    // ƒê·ªãnh d·∫°ng 3: /d/ID/
    const dMatch = input.match(/\/d\/([a-zA-Z0-9\-_]+)/);
    if (dMatch && dMatch[1]) {
      return dMatch[1];
    }

    throw new Error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t Folder ID t·ª´ URL");
  } catch (error) {
    if (error instanceof TypeError) {
      // URL kh√¥ng h·ª£p l·ªá
      throw new Error("URL Google Drive kh√¥ng h·ª£p l·ªá");
    }
    throw error;
  }
}

async function showMenu() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  console.log("\n=== GOOGLE DRIVE TOOL ===");
  console.log("1. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng video");
  console.log("2. Sao ch√©p folder");
  console.log("3. T·∫°o b·∫£n sao ƒë·ªÉ x·ª≠ l√Ω l·∫°i video ch·∫•t l∆∞·ª£ng th·∫•p");
  console.log("4. Ch·ªçn v√† kh√¥i ph·ª•c t√™n cho b·∫£n ch·∫•t l∆∞·ª£ng cao nh·∫•t");
  console.log("5. Tho√°t");

  return new Promise((resolve) => {
    rl.question("\nVui l√≤ng ch·ªçn ch·ª©c nƒÉng (1-5): ", (choice) => {
      rl.close();
      resolve(choice.trim());
    });
  });
}

async function main() {
  if (process.argv.length < 3) {
    console.log("‚ùå Vui l√≤ng cung c·∫•p Folder ID ho·∫∑c URL");
    console.log("S·ª≠ d·ª•ng: node src/app.js <folder_id_ho·∫∑c_url>");
    console.log("\nV√≠ d·ª•:");
    console.log(
      "- URL folder: https://drive.google.com/drive/folders/YOUR_FOLDER_ID"
    );
    console.log(
      "- URL chia s·∫ª: https://drive.google.com/drive/u/0/folders/YOUR_FOLDER_ID"
    );
    console.log("- Folder ID: YOUR_FOLDER_ID");
    process.exit(1);
  }

  const inputPath = process.argv[2];

  try {
    let folderId = extractFolderId(inputPath);
    console.log("\nüìÇ Folder ID:", folderId);

    const choice = await showMenu();

    // X√°c th·ª±c v·ªõi Google Drive
    const { oauth2Client, drive } = await authenticate();

    // Kh·ªüi t·∫°o VideoQualityChecker
    const checker = new VideoQualityChecker(oauth2Client, drive);

    switch (choice) {
      case "1":
        console.log(`\nüöÄ B·∫Øt ƒë·∫ßu qu√©t folder...`);
        const results = await checker.checkFolderVideoQuality(folderId);

        // In k·∫øt qu·∫£ t·ªïng quan
        console.log("\nüìä K·∫øt qu·∫£ t·ªïng quan:");
        console.log(`T·ªïng s·ªë video: ${results.totalVideos}`);
        console.log(`Full HD (1080p+): ${results.resolution["1080p"]}`);
        console.log(`HD (720p): ${results.resolution["720p"]}`);
        console.log(`SD (480p): ${results.resolution["480p"]}`);
        console.log(`360p: ${results.resolution["360p"]}`);
        console.log(`Th·∫•p h∆°n 360p: ${results.resolution["lower"]}`);
        console.log(`Kh√¥ng x√°c ƒë·ªãnh: ${results.resolution["unknown"]}`);

        // L∆∞u k·∫øt qu·∫£ chi ti·∫øt v√†o file
        const fs = require("fs");
        const resultFile = `video-quality-${folderId}.json`;
        fs.writeFileSync(resultFile, JSON.stringify(results, null, 2));
        console.log(`\nüíæ ƒê√£ l∆∞u k·∫øt qu·∫£ chi ti·∫øt v√†o file ${resultFile}`);
        break;

      case "2":
        console.log("\nüöÄ B·∫Øt ƒë·∫ßu sao ch√©p folder...");
        await checker.copyToBackupFolder(folderId);
        break;

      case "3":
        console.log("\nüîÑ B·∫Øt ƒë·∫ßu t·∫°o b·∫£n sao ƒë·ªÉ x·ª≠ l√Ω...");
        await checker.createCopiesForProcessing(folderId);
        break;

      case "4":
        console.log("\nüîç B·∫Øt ƒë·∫ßu ch·ªçn l·ªçc b·∫£n ch·∫•t l∆∞·ª£ng cao...");
        await checker.selectBestQualityCopies(folderId);
        break;

      case "5":
        console.log("üëã ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh.");
        process.exit(0);
        break;

      default:
        console.log("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
        process.exit(1);
    }
  } catch (error) {
    console.error("‚ùå L·ªói:", error.message);
    process.exit(1);
  }
}

main();
