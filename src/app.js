const DriveAPI = require('./api/DriveAPI');
const VideoQualityChecker = require('./api/VideoQualityChecker');
const readline = require('readline');

function extractFolderId(input) {
  if (input.includes('drive.google.com')) {
    const match = input.match(/folders\/([a-zA-Z0-9\-_]+)/);
    if (match && match[1]) {
      return match[1];
    }
    throw new Error('Kh√¥ng th·ªÉ tr√≠ch xu·∫•t Folder ID t·ª´ URL');
  }
  return input;
}

async function showMenu() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  console.log('\n=== GOOGLE DRIVE TOOL ===');
  console.log('1. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng video');
  console.log('2. Sao ch√©p folder');
  
  return new Promise((resolve) => {
    rl.question('\nVui l√≤ng ch·ªçn ch·ª©c nƒÉng (1-2): ', (choice) => {
      rl.close();
      resolve(choice.trim());
    });
  });
}

async function main() {
  if (process.argv.length < 3) {
    console.log('‚ùå Vui l√≤ng cung c·∫•p Folder ID ho·∫∑c URL');
    console.log('S·ª≠ d·ª•ng: node src/app.js <folder_id_ho·∫∑c_url>');
    process.exit(1);
  }

  const inputPath = process.argv[2];
  
  try {
    // Hi·ªÉn th·ªã menu v√† nh·∫≠n l·ª±a ch·ªçn
    const choice = await showMenu();
    
    // Tr√≠ch xu·∫•t folder ID t·ª´ input
    const folderId = extractFolderId(inputPath);
    console.log('\nüìÇ Folder ID:', folderId);

    // Kh·ªüi t·∫°o v√† x√°c th·ª±c DriveAPI
    const driveAPI = new DriveAPI();
    await driveAPI.authenticate();

    // Kh·ªüi t·∫°o VideoQualityChecker
    const checker = new VideoQualityChecker(
      driveAPI.oauth2Client, 
      driveAPI.drive, 
      driveAPI.processLogger
    );

    // L·∫•y t√™n folder
    const folderName = await driveAPI.getFolderName(folderId);
    if (folderName) {
      console.log(`üìÇ T√™n folder: ${folderName}`);
    }

    switch(choice) {
      case '1':
        // Ki·ªÉm tra ch·∫•t l∆∞·ª£ng
        console.log(`\nüöÄ B·∫Øt ƒë·∫ßu qu√©t folder...`);
        const results = await checker.checkFolderVideoQuality(folderId);

        // In k·∫øt qu·∫£ t·ªïng quan
        console.log('\nüìä K·∫øt qu·∫£ t·ªïng quan:');
        console.log(`T·ªïng s·ªë video: ${results.totalVideos}`);
        console.log(`Full HD (1080p+): ${results.resolution['1080p']}`);
        console.log(`HD (720p): ${results.resolution['720p']}`);
        console.log(`SD (480p): ${results.resolution['480p']}`);
        console.log(`360p: ${results.resolution['360p']}`);
        console.log(`Th·∫•p h∆°n 360p: ${results.resolution['lower']}`);
        console.log(`Kh√¥ng x√°c ƒë·ªãnh: ${results.resolution['unknown']}`);

        // L∆∞u k·∫øt qu·∫£ chi ti·∫øt v√†o file
        const fs = require('fs');
        const resultFile = `video-quality-${folderName || folderId}.json`;
        fs.writeFileSync(resultFile, JSON.stringify(results, null, 2));
        console.log(`\nüíæ ƒê√£ l∆∞u k·∫øt qu·∫£ chi ti·∫øt v√†o file ${resultFile}`);
        break;

      case '2':
        // Sao ch√©p folder
        console.log('\nüöÄ B·∫Øt ƒë·∫ßu sao ch√©p folder...');
        await checker.copyToBackupFolder(folderId);
        break;

      default:
        console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!');
        process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    process.exit(1);
  }
}

main(); 
