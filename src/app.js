const DriveAPI = require('./api/DriveAPI');
const VideoQualityChecker = require('./api/VideoQualityChecker');
const FolderCloner = require('./api/FolderCloner');

function extractFolderId(input) {
  // Ki·ªÉm tra xem input c√≥ ph·∫£i l√† URL kh√¥ng
  if (input.includes('drive.google.com')) {
    // T√¨m ph·∫ßn ID trong URL b·∫±ng regex
    const match = input.match(/folders\/([a-zA-Z0-9\-_]+)/);
    if (match && match[1]) {
      return match[1];
    }
    throw new Error('Kh√¥ng th·ªÉ tr√≠ch xu·∫•t Folder ID t·ª´ URL');
  }
  // N·∫øu kh√¥ng ph·∫£i URL, tr·∫£ v·ªÅ nguy√™n input
  return input;
}

async function showMenu() {
  console.log('\nüìã Vui l√≤ng ch·ªçn ch·ª©c nƒÉng:');
  console.log('1. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng video');
  console.log('2. N√¢ng c·∫•p ch·∫•t l∆∞·ª£ng video');
  
  const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    readline.question('Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1 ho·∫∑c 2): ', (choice) => {
      readline.close();
      resolve(choice.trim());
    });
  });
}

async function main() {
  if (process.argv.length < 3) {
    console.log('‚ùå Vui l√≤ng cung c·∫•p Folder ID ho·∫∑c URL');
    console.log('S·ª≠ d·ª•ng: node src/app.js <folder_id_ho·∫∑c_url>');
    process.exit(1);
  }

  const inputPath = process.argv[2];
  const choice = await showMenu();
  
  try {
    const folderId = extractFolderId(inputPath);
    console.log('üìÇ Folder ID:', folderId);

    const driveAPI = new DriveAPI();
    await driveAPI.authenticate();

    const folderName = await driveAPI.getFolderName(folderId);
    if (folderName) {
      console.log(`üìÇ T√™n folder: ${folderName}`);
    }

    if (choice === '1') {
      // Ki·ªÉm tra ch·∫•t l∆∞·ª£ng video
      const checker = new VideoQualityChecker(
        driveAPI.oauth2Client,
        driveAPI.drive
      );
      
      console.log(`\nüöÄ B·∫Øt ƒë·∫ßu qu√©t folder: ${folderId}`);
      const results = await checker.checkFolderVideoQuality(folderId);

      // In k·∫øt qu·∫£ t·ªïng quan
      console.log('\nüìä K·∫øt qu·∫£ t·ªïng quan:');
      console.log(`T·ªïng s·ªë video: ${results.totalVideos}`);
      console.log(`Ch·∫•t l∆∞·ª£ng cao (>=720p): ${results.highQuality}`);
      console.log(`Ch·∫•t l∆∞·ª£ng trung b√¨nh (480p): ${results.mediumQuality}`);
      console.log(`Ch·∫•t l∆∞·ª£ng th·∫•p (<480p): ${results.lowQuality}`);

      // L∆∞u k·∫øt qu·∫£
      const fs = require('fs');
      const resultFile = `video-quality-${folderName || folderId}.json`;
      fs.writeFileSync(resultFile, JSON.stringify(results, null, 2));
      console.log(`\nüíæ ƒê√£ l∆∞u k·∫øt qu·∫£ chi ti·∫øt v√†o file ${resultFile}`);

    } else if (choice === '2') {
      // N√¢ng c·∫•p ch·∫•t l∆∞·ª£ng video
      const videoQualityChecker = new VideoQualityChecker(
        driveAPI.oauth2Client,
        driveAPI.drive
      );
      
      const cloner = new FolderCloner(
        driveAPI.oauth2Client,
        driveAPI.drive,
        videoQualityChecker
      );

      console.log('\nüöÄ B·∫Øt ƒë·∫ßu n√¢ng c·∫•p ch·∫•t l∆∞·ª£ng video...');
      const result = await cloner.upgradeVideoQuality(folderId);
      
      console.log('\n‚úÖ Ho√†n th√†nh n√¢ng c·∫•p:');
      console.log(`üìä S·ªë video ƒë√£ x·ª≠ l√Ω: ${result.processedCount}`);

    } else {
      console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá');
      process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    process.exit(1);
  }
}

main(); 
