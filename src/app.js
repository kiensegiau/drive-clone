const DriveAPI = require('./api/DriveAPI');
const VideoQualityChecker = require('./api/VideoQualityChecker');
const readline = require('readline');

function extractFolderId(input) {
  // N·∫øu input ƒë√£ l√† ID thu·∫ßn t√∫y (kh√¥ng ch·ª©a URL)
  if (!input.includes('drive.google.com')) {
    return input;
  }

  // X·ª≠ l√Ω c√°c ƒë·ªãnh d·∫°ng URL kh√°c nhau
  try {
    const url = new URL(input);
    
    // ƒê·ªãnh d·∫°ng 1: folders/ID trong path
    const foldersMatch = input.match(/folders\/([a-zA-Z0-9\-_]+)/);
    if (foldersMatch && foldersMatch[1]) {
      return foldersMatch[1];
    }

    // ƒê·ªãnh d·∫°ng 2: id=ID trong query params
    const searchParams = url.searchParams;
    if (searchParams.has('id')) {
      return searchParams.get('id');
    }

    // ƒê·ªãnh d·∫°ng 3: /d/ID/
    const dMatch = input.match(/\/d\/([a-zA-Z0-9\-_]+)/);
    if (dMatch && dMatch[1]) {
      return dMatch[1];
    }

    throw new Error('Kh√¥ng th·ªÉ tr√≠ch xu·∫•t Folder ID t·ª´ URL');
  } catch (error) {
    if (error instanceof TypeError) {
      // URL kh√¥ng h·ª£p l·ªá
      throw new Error('URL Google Drive kh√¥ng h·ª£p l·ªá');
    }
    throw error;
  }
}

async function showMenu() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  console.log('\n=== GOOGLE DRIVE TOOL ===');
  console.log('1. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng video');
  console.log('2. Sao ch√©p folder');
  
  return new Promise((resolve) => {
    rl.question('\nVui l√≤ng ch·ªçn ch·ª©c nƒÉng (1-2): ', (choice) => {
      rl.close();
      resolve(choice.trim());
    });
  });
}

async function main() {
  if (process.argv.length < 3) {
    console.log('‚ùå Vui l√≤ng cung c·∫•p Folder ID ho·∫∑c URL');
    console.log('S·ª≠ d·ª•ng: node src/app.js <folder_id_ho·∫∑c_url>');
    console.log('\nV√≠ d·ª•:');
    console.log('- URL folder: https://drive.google.com/drive/folders/YOUR_FOLDER_ID');
    console.log('- URL chia s·∫ª: https://drive.google.com/drive/u/0/folders/YOUR_FOLDER_ID');
    console.log('- Folder ID: YOUR_FOLDER_ID');
    process.exit(1);
  }

  const inputPath = process.argv[2];
  
  try {
    // Tr√≠ch xu·∫•t folder ID t·ª´ input v·ªõi th√¥ng b√°o chi ti·∫øt
    let folderId;
    try {
      folderId = extractFolderId(inputPath);
      console.log('\nüìÇ Folder ID:', folderId);
    } catch (error) {
      console.error('‚ùå L·ªói:', error.message);
      console.log('\nVui l√≤ng ki·ªÉm tra l·∫°i URL ho·∫∑c ID folder');
      process.exit(1);
    }

    // Hi·ªÉn th·ªã menu v√† nh·∫≠n l·ª±a ch·ªçn
    const choice = await showMenu();
    
    // Kh·ªüi t·∫°o v√† x√°c th·ª±c DriveAPI
    const driveAPI = new DriveAPI();
    await driveAPI.authenticate();

    // Kh·ªüi t·∫°o VideoQualityChecker
    const checker = new VideoQualityChecker(
      driveAPI.oauth2Client, 
      driveAPI.drive, 
      driveAPI.processLogger
    );

    // L·∫•y t√™n folder v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n
    let folderName;
    try {
      folderName = await driveAPI.getFolderName(folderId);
      if (folderName) {
        console.log(`üìÇ T√™n folder: ${folderName}`);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y t√™n folder:', error.message);
      folderName = 'Unnamed_Folder';
    }

    // Th√™m retry logic
    const MAX_RETRIES = 3;
    const RETRY_DELAY = 1000;

    async function withRetry(fn) {
      for (let i = 0; i < MAX_RETRIES; i++) {
        try {
          return await fn();
        } catch (error) {
          if (i === MAX_RETRIES - 1) throw error;
          await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
        }
      }
    }

    switch(choice) {
      case '1':
        console.log(`\nüöÄ B·∫Øt ƒë·∫ßu qu√©t folder...`);
        const results = await withRetry(() => 
          checker.checkFolderVideoQuality(folderId)
        );

        // In k·∫øt qu·∫£ t·ªïng quan
        console.log('\nüìä K·∫øt qu·∫£ t·ªïng quan:');
        console.log(`T·ªïng s·ªë video: ${results.totalVideos}`);
        console.log(`Full HD (1080p+): ${results.resolution['1080p']}`);
        console.log(`HD (720p): ${results.resolution['720p']}`);
        console.log(`SD (480p): ${results.resolution['480p']}`);
        console.log(`360p: ${results.resolution['360p']}`);
        console.log(`Th·∫•p h∆°n 360p: ${results.resolution['lower']}`);
        console.log(`Kh√¥ng x√°c ƒë·ªãnh: ${results.resolution['unknown']}`);

        // L∆∞u k·∫øt qu·∫£ chi ti·∫øt v√†o file
        const fs = require('fs');
        const resultFile = `video-quality-${folderName || folderId}.json`;
        fs.writeFileSync(resultFile, JSON.stringify(results, null, 2));
        console.log(`\nüíæ ƒê√£ l∆∞u k·∫øt qu·∫£ chi ti·∫øt v√†o file ${resultFile}`);
        break;

      case '2':
        console.log('\nüöÄ B·∫Øt ƒë·∫ßu sao ch√©p folder...');
        await withRetry(() => 
          checker.copyToBackupFolder(folderId)
        );
        break;

      default:
        console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!');
        process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    process.exit(1);
  }
}

main(); 
