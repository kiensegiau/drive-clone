const DriveAPI = require("./api/DriveAPI");
const fs = require('fs');
const path = require('path');

function cleanupTempFiles() {
  const tempDir = path.join(process.cwd(), 'temp');
  
  // T·∫°o th∆∞ m·ª•c temp n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
    return;
  }

  // ƒê·ªçc t·∫•t c·∫£ files trong th∆∞ m·ª•c temp
  const files = fs.readdirSync(tempDir);
  
  console.log(`üßπ ƒêang d·ªçn d·∫πp ${files.length} file t·∫°m...`);
  
  for (const file of files) {
    try {
      const filePath = path.join(tempDir, file);
      fs.unlinkSync(filePath);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file ${file}:`, error.message);
    }
  }
}

async function main(folderUrl) {
  console.log("üé¨ B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh drive-clone");

  try {
    // D·ªçn d·∫πp files t·∫°m tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
    cleanupTempFiles();

    const driveAPI = new DriveAPI();
    await driveAPI.authenticate();

    if (!folderUrl) {
      throw new Error("Vui l√≤ng cung c·∫•p URL folder Google Drive");
    }

    // H·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng URL
    let sourceFolderId;
    if (folderUrl.includes("/folders/")) {
      sourceFolderId = folderUrl.match(/folders\/([a-zA-Z0-9_-]+)/)?.[1];
    } else if (folderUrl.includes("id=")) {
      sourceFolderId = folderUrl.match(/id=([a-zA-Z0-9_-]+)/)?.[1];
    } else if (folderUrl.match(/^[a-zA-Z0-9_-]+$/)) {
      sourceFolderId = folderUrl;
    }

    if (!sourceFolderId) {
      throw new Error("URL folder kh√¥ng h·ª£p l·ªá");
    }

    console.log(`üîë Folder ID: ${sourceFolderId}`);

    try {
      await driveAPI.start(sourceFolderId);
    } catch (error) {
      console.error("‚ùå L·ªói x·ª≠ l√Ω folder g·ªëc:", error.message);
    }

    console.log("‚úÖ Ho√†n th√†nh ch∆∞∆°ng tr√¨nh");
  } catch (error) {
    console.error("‚ùå L·ªói kh·ªüi ƒë·ªông:", error.message);
    throw error;
  }
}

module.exports = { main };

// Ch·ªâ ch·∫°y khi g·ªçi tr·ª±c ti·∫øp t·ª´ command line
if (require.main === module) {
  const url = process.argv[2];
  main(url).catch((error) => {
    console.error("‚ùå L·ªói ch∆∞∆°ng tr√¨nh:", error.message);
    process.exit(1);
  });
}
