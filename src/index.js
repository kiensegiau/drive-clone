const DriveAPI = require("./api/DriveAPI");
const { initializeApp } = require("firebase/app");
const { getDatabase, ref, get, update } = require("firebase/database");
const fs = require("fs");
const path = require("path");
const readline = require("readline");
const {
  getAppRoot,
  sanitizePath,
  getConfigPath,
  getTempPath,
  getDownloadsPath,
  ensureDirectoryExists,
  safeUnlink,
  cleanupTempFiles,
  FOLDER_NAMES,
} = require("./utils/pathUtils");
const os = require("os");
const crypto = require("crypto");
const DriveDesktopAPI = require("./api/DriveDesktopAPI");
const DesktopVideoHandler = require("./api/VideoHandlers/DesktopVideoHandler");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function askQuestion(question) {
  return new Promise((resolve) => rl.question(question, resolve));
}

async function cleanup() {
  console.log("üßπ ƒêang d·ªçn d·∫πp...");
  try {
    const tempDir = getTempPath();
    if (fs.existsSync(tempDir)) {
      const files = fs.readdirSync(tempDir);
      for (const file of files) {
        const filePath = path.join(tempDir, file);
      }
    }
  } catch (error) {
    console.error("‚ùå L·ªói d·ªçn d·∫πp:", error);
  }
}

// Th√™m signal handlers
process.on("SIGINT", async () => {
  console.log("\n\n‚ö†Ô∏è ƒêang d·ª´ng ch∆∞∆°ng tr√¨nh...");

  process.exit(0);
});

process.on("uncaughtException", async (error) => {
  console.error("\n‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c:", error);

  process.exit(1);
});

// C·∫•u h√¨nh th∆∞ m·ª•c t·∫£i v·ªÅ
const downloadConfig = {
  baseDir: getDownloadsPath(),
  videoDir: FOLDER_NAMES.VIDEOS,
  pdfDir: "pdfs",
  otherDir: "others",
};

// T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
async function initDownloadDirs() {
  const dirs = [
    downloadConfig.baseDir,
    path.join(downloadConfig.baseDir, downloadConfig.videoDir),
    path.join(downloadConfig.baseDir, downloadConfig.pdfDir),
    path.join(downloadConfig.baseDir, downloadConfig.otherDir),
  ];

  for (const dir of dirs) {
    await ensureDirectoryExists(dir);
    console.log(`üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: ${dir}`);
  }
}

// C·∫•u h√¨nh Firebase
const firebaseConfig = {
  apiKey: "AIzaSyB8Haj2w6dSeagE44XzB7aty1YZrGJxnPM",
  authDomain: "hocmai-1d38d.firebaseapp.com",
  databaseURL:
    "https://hocmai-1d38d-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "hocmai-1d38d",
  storageBucket: "hocmai-1d38d.appspot.com",
  messagingSenderId: "861555630148",
  appId: "1:861555630148:web:ca50d2a00510c9907d9c11",
  measurementId: "G-T2X5ZEJN58",
};

// Kh·ªüi t·∫°o Firebase
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);

// H√†m l·∫•y hardware ID
function getHardwareID() {
  const cpu = os.cpus()[0].model;
  const totalMem = os.totalmem();
  const hostname = os.hostname();
  const platform = os.platform();

  // T·∫°o m·ªôt chu·ªói duy nh·∫•t t·ª´ th√¥ng tin ph·∫ßn c·ª©ng
  const hardwareString = `${cpu}-${totalMem}-${hostname}-${platform}`;

  // M√£ h√≥a th√†nh hardware ID
  return crypto.createHash("sha256").update(hardwareString).digest("hex");
}

// H√†m ki·ªÉm tra key
async function validateLicenseKey(key) {
  try {
    const keyRef = ref(database, `licenses/${key}`);
    const snapshot = await get(keyRef);

    if (!snapshot.exists()) {
      throw new Error("Key kh√¥ng h·ª£p l·ªá");
    }

    const keyData = snapshot.val();
    if (!keyData.active) {
      throw new Error("Key ƒë√£ b·ªã v√¥ hi·ªáu h√≥a");
    }

    if (keyData.expiryDate && new Date(keyData.expiryDate) < new Date()) {
      throw new Error("Key ƒë√£ h·∫øt h·∫°n");
    }

    // Ki·ªÉm tra hardware ID
    const currentHardwareID = getHardwareID();

    if (keyData.hardwareID) {
      // N·∫øu key ƒë√£ ƒë∆∞·ª£c g·∫Øn v·ªõi m·ªôt m√°y
      if (keyData.hardwareID !== currentHardwareID) {
        throw new Error("Key n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng tr√™n m√°y kh√°c");
      }
    } else {
      // N·∫øu key ch∆∞a ƒë∆∞·ª£c g·∫Øn v·ªõi m√°y n√†o, g·∫Øn v·ªõi m√°y hi·ªán t·∫°i
      await update(keyRef, {
        hardwareID: currentHardwareID,
        firstUsedAt: new Date().toISOString(),
      });
    }

    // C·∫≠p nh·∫≠t l·∫ßn s·ª≠ d·ª•ng cu·ªëi
    await update(keyRef, {
      lastUsed: new Date().toISOString(),
      lastHardwareID: currentHardwareID,
    });

    return true;
  } catch (error) {
    throw new Error(`L·ªói x√°c th·ª±c key: ${error.message}`);
  }
}

// Th√™m h√†m ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c config
function ensureConfigDirectory() {
  try {
    const isPkg = typeof process.pkg !== "undefined";
    const rootDir = isPkg ? path.dirname(process.execPath) : process.cwd();
    const configPath = path.join(rootDir, "config");

    if (!fs.existsSync(configPath)) {
      fs.mkdirSync(configPath, { recursive: true });
    }

    // Ki·ªÉm tra quy·ªÅn ghi
    fs.accessSync(configPath, fs.constants.W_OK);
    return configPath;
  } catch (error) {
    console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c config:", error.message);
    // Th·ª≠ t·∫°o trong AppData n·∫øu l√† Windows
    if (process.platform === "win32") {
      const appDataPath = path.join(process.env.APPDATA, "drive-clone");
      if (!fs.existsSync(appDataPath)) {
        fs.mkdirSync(appDataPath, { recursive: true });
      }
      return appDataPath;
    }
    return null;
  }
}

// S·ª≠a h√†m ƒë·ªçc key
function getSavedKey() {
  try {
    const configDir = ensureConfigDirectory();
    if (!configDir) {
      throw new Error("Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c config");
    }

    const configPath = path.join(configDir, "license.json");
    console.log(`üìÇ ƒê·ªçc key t·ª´: ${configPath}`);

    if (fs.existsSync(configPath)) {
      const data = JSON.parse(fs.readFileSync(configPath, "utf8"));
      if (data && data.key) {
        console.log("‚úÖ ƒê√£ ƒë·ªçc ƒë∆∞·ª£c key ƒë√£ l∆∞u");
        return data.key;
      }
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c key ƒë√£ l∆∞u:", error.message);
  }
  return null;
}

// S·ª≠a h√†m l∆∞u key
function saveKey(key) {
  try {
    const configDir = ensureConfigDirectory();
    if (!configDir) {
      throw new Error("Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c config");
    }

    const configPath = path.join(configDir, "license.json");
    console.log(`üíæ L∆∞u key v√†o: ${configPath}`);

    const data = {
      key,
      savedAt: new Date().toISOString(),
    };

    fs.writeFileSync(configPath, JSON.stringify(data, null, 2));
    console.log("‚úÖ ƒê√£ l∆∞u key th√†nh c√¥ng");

    // Ki·ªÉm tra l·∫°i xem ƒë√£ l∆∞u th√†nh c√¥ng ch∆∞a
    const savedData = JSON.parse(fs.readFileSync(configPath, "utf8"));
    if (!savedData || !savedData.key) {
      throw new Error("L∆∞u key kh√¥ng th√†nh c√¥ng");
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è Kh√¥ng l∆∞u ƒë∆∞·ª£c key:", error.message);
  }
}

// S·ª≠a h√†m x√≥a key
async function removeKey() {
  try {
    const configDir = ensureConfigDirectory();
    if (!configDir) {
      throw new Error("Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c config");
    }

    const keyPath = path.join(configDir, "license.json");
    console.log(`üóëÔ∏è X√≥a key t·∫°i: ${keyPath}`);

    if (fs.existsSync(keyPath)) {
      await fs.promises.unlink(keyPath);
      console.log("‚úÖ ƒê√£ x√≥a key c≈©");
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è Kh√¥ng x√≥a ƒë∆∞·ª£c file key:", error.message);
  }
}

async function listDriveFolders(driveAPI) {
  try {
    let currentFolderId = "root";
    let folderPath = [];

    while (true) {
      const folders = await driveAPI.listFoldersInParent(currentFolderId);

      if (!folders || folders.length === 0) {
        console.log("\nüìÇ Folder n√†y tr·ªëng");
        if (folderPath.length > 0) {
          // Quay l·∫°i folder tr∆∞·ªõc ƒë√≥
          currentFolderId = folderPath[folderPath.length - 1].id;
          folderPath.pop();
          continue;
        }
        return null;
      }

      // Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
      if (folderPath.length > 0) {
        console.log("\nüìÇ ƒê∆∞·ªùng d·∫´n hi·ªán t·∫°i:");
        console.log(folderPath.map((f) => f.name).join(" > "));
      }

      console.log("\nDanh s√°ch folder:");
      folders.forEach((folder, index) => {
        console.log(
          `${(index + 1).toString().padStart(2, "0")}. ${folder.name}`
        );
      });

      const options = [
        "",
        "T√πy ch·ªçn:",
        "- Nh·∫≠p s·ªë th·ª© t·ª± ƒë·ªÉ m·ªü folder",
        "- Nh·∫≠p 'b' ƒë·ªÉ quay l·∫°i folder tr∆∞·ªõc",
        "- Nh·∫≠p 's' ƒë·ªÉ ch·ªçn folder hi·ªán t·∫°i",
        "- Nh·∫≠p 'q' ƒë·ªÉ tho√°t",
        "",
      ].join("\n");

      const choice = await askQuestion(options);

      if (choice.toLowerCase() === "q") {
        return null;
      }

      if (choice.toLowerCase() === "b") {
        if (folderPath.length > 0) {
          currentFolderId = folderPath[folderPath.length - 1].id;
          folderPath.pop();
        } else {
          console.log("\n‚ö†Ô∏è ƒê√£ ·ªü th∆∞ m·ª•c g·ªëc");
        }
        continue;
      }

      if (choice.toLowerCase() === "s") {
        console.log(`\n‚úÖ ƒê√£ ch·ªçn folder hi·ªán t·∫°i: ${currentFolderId}`);
        return currentFolderId;
      }

      const index = parseInt(choice) - 1;
      if (index >= 0 && index < folders.length) {
        const selectedFolder = folders[index];
        folderPath.push({ id: currentFolderId, name: selectedFolder.name });
        currentFolderId = selectedFolder.id;
      } else {
        console.log("\n‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i");
      }
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch folder:", error);
    return null;
  }
}

async function main(folderUrl) {
  console.log("üé¨ B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh drive-clone");
  let driveAPI = null;
  let defaultPath = null;

  try {
    // Ki·ªÉm tra key ƒë√£ l∆∞u
    let licenseKey = getSavedKey();

    if (!licenseKey) {
      // Ch·ªâ h·ªèi key n·∫øu ch∆∞a c√≥
      licenseKey = await askQuestion("\nüîë Nh·∫≠p key c·ªßa b·∫°n: ");
    } else {
      console.log("‚úÖ ƒêang s·ª≠ d·ª•ng key ƒë√£ l∆∞u");
    }

    try {
      // X√°c th·ª±c key
      await validateLicenseKey(licenseKey);
      console.log("‚úÖ Key h·ª£p l·ªá");
      // L∆∞u key sau khi x√°c th·ª±c th√†nh c√¥ng
      saveKey(licenseKey);
    } catch (error) {
      // N·∫øu key kh√¥ng h·ª£p l·ªá, x√≥a file key c≈©
      removeKey();
      throw error; // N√©m l·∫°i l·ªói ƒë·ªÉ d·ª´ng ch∆∞∆°ng tr√¨nh
    }

    // Validate input
    let sourceFolderId = null;
    if (folderUrl) {
      sourceFolderId = extractFolderId(folderUrl);
      if (!sourceFolderId) {
        throw new Error("URL folder kh√¥ng h·ª£p l·ªá");
      }
    } else {
      // Kh·ªüi t·∫°o DriveAPI s·ªõm h∆°n ƒë·ªÉ l·∫•y danh s√°ch folder
      driveAPI = new DriveAPI(false, 3, 5, 0, 5);
      await driveAPI.authenticate();

      sourceFolderId = await listDriveFolders(driveAPI);
      if (!sourceFolderId) {
        throw new Error("Kh√¥ng th·ªÉ l·∫•y folder ID");
      }
    }

    // Ch·ªçn mode
    const choice = await askQuestion(
      "\nüìã Ch·ªçn ch·∫ø ƒë·ªô:\n" +
        "1. T·∫£i v√† upload l√™n Drive qua API\n" +
        "2. T·∫£i v√† upload qua Drive Desktop\n" +
        "L·ª±a ch·ªçn c·ªßa b·∫°n (1/2): "
    );

    if (!["1", "2"].includes(choice)) {
      throw new Error("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá");
    }

    const isDownloadMode = choice === "2";

    if (isDownloadMode) {
      const nodeDiskInfo = require("node-disk-info");
      let disks;
      try {
        disks = await nodeDiskInfo.getDiskInfo();
      } catch (error) {
        console.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ·ªï ƒëƒ©a:", error);
        throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ·ªï ƒëƒ©a");
      }

      console.log("\nüíæ C√°c ·ªï ƒëƒ©a c√≥ s·∫µn:");
      disks.forEach((disk, index) => {
        console.log(
          `${index + 1}. ${disk.mounted} (${
            disk.filesystem
          }, C√≤n tr·ªëng: ${formatBytes(disk.available)})`
        );
      });

      const driveChoice = await askQuestion("\nCh·ªçn ·ªï ƒëƒ©a (nh·∫≠p s·ªë th·ª© t·ª±): ");
      const selectedDriveIndex = parseInt(driveChoice) - 1;

      if (
        isNaN(selectedDriveIndex) ||
        selectedDriveIndex < 0 ||
        selectedDriveIndex >= disks.length
      ) {
        throw new Error("L·ª±a ch·ªçn ·ªï ƒëƒ©a kh√¥ng h·ª£p l·ªá");
      }

      const selectedDrive = disks[selectedDriveIndex].mounted;

      // Th√™m My Drive n·∫øu l√† ·ªï G:
      if (selectedDrive.startsWith("G:")) {
        defaultPath = path.join(selectedDrive, "My Drive", "drive-clone");
      } else {
        defaultPath = path.join(selectedDrive, "drive-clone");
      }

      await ensureDirectoryExists(defaultPath);
      console.log(`\nüìÇ Files s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ th∆∞ m·ª•c: ${defaultPath}`);

      const confirm = await askQuestion(
        "\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng? (y/n): "
      );
      if (confirm.toLowerCase() !== "y") {
        console.log("‚ùå ƒê√£ h·ªßy thao t√°c");
        return;
      }
    }

    // Th√™m ph·∫ßn h·ªèi s·ªë l∆∞·ª£ng file x·ª≠ l√Ω
    let maxConcurrent = 3;
    let maxBackground = 5;

    if (!isDownloadMode) {
      console.log("\n‚öôÔ∏è C·∫•u h√¨nh t·∫£i xu·ªëng:");

      const concurrent = await askQuestion(
        "S·ªë Chrome ƒë·ªìng th·ªùi (1-5, m·∫∑c ƒë·ªãnh: 3): "
      );
      if (concurrent && !isNaN(concurrent)) {
        maxConcurrent = Math.max(1, Math.min(parseInt(concurrent), 5));
      }

      const background = await askQuestion(
        "S·ªë t·∫£i xu·ªëng ƒë·ªìng th·ªùi (1-10, m·∫∑c ƒë·ªãnh: 5): "
      );
      if (background && !isNaN(background)) {
        maxBackground = Math.max(1, Math.min(parseInt(background), 10));
      }

      console.log(`\nüìä C·∫•u h√¨nh ƒë√£ ch·ªçn:
        - S·ªë Chrome ƒë·ªìng th·ªùi: ${maxConcurrent}
        - S·ªë t·∫£i xu·ªëng ƒë·ªìng th·ªùi: ${maxBackground}
      `);
    }

    // Th√™m ph·∫ßn h·ªèi s·ªë l∆∞·ª£ng video upload tr∆∞·ªõc khi ngh·ªâ
    const batchSizeInput = await askQuestion(
      "S·ªë video upload tr∆∞·ªõc khi ngh·ªâ (1-20, m·∫∑c ƒë·ªãnh: 5): "
    );
    const batchSize = parseInt(batchSizeInput) || 5;

    // Th√™m ph·∫ßn h·ªèi th·ªùi gian ngh·ªâ
    const pauseDurationInput = await askQuestion(
      "Th·ªùi gian ngh·ªâ sau m·ªói batch (ph√∫t, m·∫∑c ƒë·ªãnh: 0): "
    );
    const pauseDuration = parseInt(pauseDurationInput) || 0;

    // Kh·ªüi t·∫°o DriveAPI v·ªõi ƒë·∫ßy ƒë·ªß tham s·ªë
    driveAPI = new DriveAPI(
      false,
      maxConcurrent,
      maxBackground,
      pauseDuration,
      batchSize // Th√™m batchSize
    );
    await driveAPI.authenticate();

    // X·ª≠ l√Ω folder
    console.log(`üîë Folder ID: ${sourceFolderId}`);

    // Tracking th·ªùi gian
    console.time("‚è±Ô∏è Th·ªùi gian th·ª±c hi·ªán");

    // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω
    if (isDownloadMode) {
      // 1. Kh·ªüi t·∫°o DriveDesktopAPI v·ªõi ƒë∆∞·ªùng d·∫´n ƒë√£ ch·ªçn
      const driveAPI = new DriveDesktopAPI(defaultPath);
      await driveAPI.authenticate();

      // 2. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω folder g·ªëc
      await driveAPI.start(sourceFolderId);
    } else {
      await driveAPI.start(sourceFolderId);
    }

    // In th·ªëng k√™
    console.timeEnd("‚è±Ô∏è Th·ªùi gian th·ª±c hi·ªán");
    driveAPI.logFinalStats();

    console.log("\n‚úÖ Ho√†n th√†nh ch∆∞∆°ng tr√¨nh");
  } catch (error) {
    console.error("\n‚ùå L·ªói ch∆∞∆°ng tr√¨nh:", error.message);
    throw error;
  } finally {
    if (driveAPI) {
    }
    rl.close();
  }
}

function extractFolderId(url) {
  if (url.includes("/folders/")) {
    return url.match(/folders\/([a-zA-Z0-9_-]+)/)?.[1];
  }
  if (url.includes("id=")) {
    return url.match(/id=([a-zA-Z0-9_-]+)/)?.[1];
  }
  if (url.match(/^[a-zA-Z0-9_-]+$/)) {
    return url;
  }
  return null;
}

// Th√™m h√†m format bytes
function formatBytes(bytes) {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

module.exports = { main };

if (require.main === module) {
  const url = process.argv[2];
  main(url).catch((error) => {
    console.error("‚ùå L·ªói ch∆∞∆°ng tr√¨nh:", error.message);
    process.exit(1);
  });
}

if (process.pkg) {
  // Khi ch·∫°y t·ª´ file exe
  process.env.APP_PATH = path.dirname(process.execPath);
} else {
  // Khi ch·∫°y t·ª´ source
  process.env.APP_PATH = process.cwd();
}

async function selectDrive() {
  try {
    // L·∫•y danh s√°ch ·ªï ƒëƒ©a
    const drives = await getDrives();

    // Hi·ªÉn th·ªã danh s√°ch
    console.log("\nDanh s√°ch ·ªï ƒëƒ©a:");
    drives.forEach((drive, index) => {
      console.log(
        `${index + 1}. ${drive.path} (${drive.label || "Kh√¥ng t√™n"})`
      );
    });

    // Ch·ªçn ·ªï ƒëƒ©a
    const choice = await question("\nCh·ªçn ·ªï ƒëƒ©a (nh·∫≠p s·ªë th·ª© t·ª±): ");
    const index = parseInt(choice) - 1;

    if (index >= 0 && index < drives.length) {
      const selectedDrive = drives[index];

      // Ki·ªÉm tra ƒë·∫∑c bi·ªát cho ·ªï ƒëƒ©a m·∫°ng
      try {
        fs.accessSync(selectedDrive.path, fs.constants.W_OK);
      } catch (error) {
        console.log(`‚ö†Ô∏è ·ªî ƒëƒ©a ${selectedDrive.path} c√≥ th·ªÉ l√† ·ªï ƒëƒ©a m·∫°ng`);
        console.log("üí° ƒêang ki·ªÉm tra k·∫øt n·ªëi...");

        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi ƒë∆∞·ª£c thi·∫øt l·∫≠p
        await new Promise((resolve) => setTimeout(resolve, 2000));
      }

      const targetPath = path.join(selectedDrive.path, "drive-clone");
      console.log(`\nüìÇ Th∆∞ m·ª•c ƒë√≠ch: ${targetPath}`);

      return targetPath;
    } else {
      throw new Error("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi ch·ªçn ·ªï ƒëƒ©a:", error.message);
    // Fallback v·ªÅ Documents
    const documentsPath = path.join(
      require("os").homedir(),
      "Documents",
      "drive-clone"
    );
    console.log(`‚Ü™Ô∏è S·ª≠ d·ª•ng th∆∞ m·ª•c m·∫∑c ƒë·ªãnh: ${documentsPath}`);
    return documentsPath;
  }
}
